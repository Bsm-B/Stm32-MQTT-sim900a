
STM32-MQTT-SIM900.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004998  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c2c  08004c2c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004c2c  08004c2c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c2c  08004c2c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c2c  08004c2c  00014c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c30  08004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e0  20000074  08004ca8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001254  08004ca8  00021254  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cce  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a12  00000000  00000000  00033d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00036780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e78  00000000  00000000  00037710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0c7  00000000  00000000  00038588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ec9  00000000  00000000  0005364f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a815  00000000  00000000  00067518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  00101d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004a40 	.word	0x08004a40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004a40 	.word	0x08004a40

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b590      	push	{r4, r7, lr}
 8000246:	b08d      	sub	sp, #52	; 0x34
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 ffa3 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f915 	bl	800047c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 fadf 	bl	8000814 <MX_GPIO_Init>
  MX_DMA_Init();
 8000256:	f000 fabf 	bl	80007d8 <MX_DMA_Init>
  MX_I2C2_Init();
 800025a:	f000 f975 	bl	8000548 <MX_I2C2_Init>
  MX_SPI2_Init();
 800025e:	f000 f9b3 	bl	80005c8 <MX_SPI2_Init>
  MX_TSC_Init();
 8000262:	f000 f9ef 	bl	8000644 <MX_TSC_Init>
  MX_USB_PCD_Init();
 8000266:	f000 fa91 	bl	800078c <MX_USB_PCD_Init>
  MX_USART3_UART_Init();
 800026a:	f000 fa2f 	bl	80006cc <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800026e:	f000 fa5d 	bl	800072c <MX_USART4_UART_Init>

  	  //	AT+IPR=115200

  	//  MQTT_Init();

  	 HAL_Delay(20000);
 8000272:	4b69      	ldr	r3, [pc, #420]	; (8000418 <main+0x1d4>)
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fff1 	bl	800125c <HAL_Delay>

	SIM900_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 800027a:	23fa      	movs	r3, #250	; 0xfa
 800027c:	009a      	lsls	r2, r3, #2
 800027e:	4967      	ldr	r1, [pc, #412]	; (800041c <main+0x1d8>)
 8000280:	4b67      	ldr	r3, [pc, #412]	; (8000420 <main+0x1dc>)
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fb42 	bl	800090c <SIM900_SendCommand>

	SIM900_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
 8000288:	23fa      	movs	r3, #250	; 0xfa
 800028a:	009a      	lsls	r2, r3, #2
 800028c:	4963      	ldr	r1, [pc, #396]	; (800041c <main+0x1d8>)
 800028e:	4b65      	ldr	r3, [pc, #404]	; (8000424 <main+0x1e0>)
 8000290:	0018      	movs	r0, r3
 8000292:	f000 fb3b 	bl	800090c <SIM900_SendCommand>

	SIM900_SendCommand("AT+CSTT=\"internet.ooredoo.tn\"", "OK\r\n", 2000);
 8000296:	23fa      	movs	r3, #250	; 0xfa
 8000298:	00da      	lsls	r2, r3, #3
 800029a:	4960      	ldr	r1, [pc, #384]	; (800041c <main+0x1d8>)
 800029c:	4b62      	ldr	r3, [pc, #392]	; (8000428 <main+0x1e4>)
 800029e:	0018      	movs	r0, r3
 80002a0:	f000 fb34 	bl	800090c <SIM900_SendCommand>

	SIM900_SendCommand("AT+CIICR\r\n", "OK\r\n", CMD_DELAY);
 80002a4:	23fa      	movs	r3, #250	; 0xfa
 80002a6:	009a      	lsls	r2, r3, #2
 80002a8:	495c      	ldr	r1, [pc, #368]	; (800041c <main+0x1d8>)
 80002aa:	4b60      	ldr	r3, [pc, #384]	; (800042c <main+0x1e8>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 fb2d 	bl	800090c <SIM900_SendCommand>

	SIM900_SendCommand("AT+CIFSR\r\n", "", CMD_DELAY);
 80002b2:	23fa      	movs	r3, #250	; 0xfa
 80002b4:	009a      	lsls	r2, r3, #2
 80002b6:	495e      	ldr	r1, [pc, #376]	; (8000430 <main+0x1ec>)
 80002b8:	4b5e      	ldr	r3, [pc, #376]	; (8000434 <main+0x1f0>)
 80002ba:	0018      	movs	r0, r3
 80002bc:	f000 fb26 	bl	800090c <SIM900_SendCommand>

	SIM900_SendCommand("AT+CSQ\r\n", "", CMD_DELAY);
 80002c0:	23fa      	movs	r3, #250	; 0xfa
 80002c2:	009a      	lsls	r2, r3, #2
 80002c4:	495a      	ldr	r1, [pc, #360]	; (8000430 <main+0x1ec>)
 80002c6:	4b5c      	ldr	r3, [pc, #368]	; (8000438 <main+0x1f4>)
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fb1f 	bl	800090c <SIM900_SendCommand>


  	mqttMessageLength_header = 16 + strlen(clientId);
 80002ce:	4b5b      	ldr	r3, [pc, #364]	; (800043c <main+0x1f8>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	0018      	movs	r0, r3
 80002d4:	f7ff ff18 	bl	8000108 <strlen>
 80002d8:	0003      	movs	r3, r0
 80002da:	3310      	adds	r3, #16
 80002dc:	001a      	movs	r2, r3
 80002de:	4b58      	ldr	r3, [pc, #352]	; (8000440 <main+0x1fc>)
 80002e0:	601a      	str	r2, [r3, #0]

  	mqtt_connect_message(mqttMessage_header, clientId);
 80002e2:	4b56      	ldr	r3, [pc, #344]	; (800043c <main+0x1f8>)
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	4b57      	ldr	r3, [pc, #348]	; (8000444 <main+0x200>)
 80002e8:	0011      	movs	r1, r2
 80002ea:	0018      	movs	r0, r3
 80002ec:	f000 fb50 	bl	8000990 <mqtt_connect_message>

  	char * topic ="fakrouna";
 80002f0:	4b55      	ldr	r3, [pc, #340]	; (8000448 <main+0x204>)
 80002f2:	623b      	str	r3, [r7, #32]
  {
    /* USER CODE END WHILE */


		  // Connect
		  SIM900_SendCommand("AT+CIPSTART=\"TCP\",\"broker.mqttdashboard.com\",\"1883\"\r\n","OK\n\r",  2000);
 80002f4:	23fa      	movs	r3, #250	; 0xfa
 80002f6:	00da      	lsls	r2, r3, #3
 80002f8:	4954      	ldr	r1, [pc, #336]	; (800044c <main+0x208>)
 80002fa:	4b55      	ldr	r3, [pc, #340]	; (8000450 <main+0x20c>)
 80002fc:	0018      	movs	r0, r3
 80002fe:	f000 fb05 	bl	800090c <SIM900_SendCommand>

		  // Check
		  SIM900_SendCommand("AT+CIPSTATUS\r\n","OK\n\r",  CMD_DELAY);
 8000302:	23fa      	movs	r3, #250	; 0xfa
 8000304:	009a      	lsls	r2, r3, #2
 8000306:	4951      	ldr	r1, [pc, #324]	; (800044c <main+0x208>)
 8000308:	4b52      	ldr	r3, [pc, #328]	; (8000454 <main+0x210>)
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fafe 	bl	800090c <SIM900_SendCommand>

		  SIM900_SendCommand("AT+CIPSEND\r\n","",  CMD_DELAY);
 8000310:	23fa      	movs	r3, #250	; 0xfa
 8000312:	009a      	lsls	r2, r3, #2
 8000314:	4946      	ldr	r1, [pc, #280]	; (8000430 <main+0x1ec>)
 8000316:	4b50      	ldr	r3, [pc, #320]	; (8000458 <main+0x214>)
 8000318:	0018      	movs	r0, r3
 800031a:	f000 faf7 	bl	800090c <SIM900_SendCommand>

		  // Header

		  for (int k = 0; k < mqttMessageLength_header; k++) {
 800031e:	2300      	movs	r3, #0
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000322:	e00a      	b.n	800033a <main+0xf6>

					  		HAL_UART_Transmit(&huart3, (uint8_t *)&mqttMessage_header[k], 1, 100);
 8000324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000326:	4b47      	ldr	r3, [pc, #284]	; (8000444 <main+0x200>)
 8000328:	18d1      	adds	r1, r2, r3
 800032a:	484c      	ldr	r0, [pc, #304]	; (800045c <main+0x218>)
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	2201      	movs	r2, #1
 8000330:	f002 fdc8 	bl	8002ec4 <HAL_UART_Transmit>
		  for (int k = 0; k < mqttMessageLength_header; k++) {
 8000334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000336:	3301      	adds	r3, #1
 8000338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800033a:	4b41      	ldr	r3, [pc, #260]	; (8000440 <main+0x1fc>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000340:	429a      	cmp	r2, r3
 8000342:	dbef      	blt.n	8000324 <main+0xe0>
					  		// SEND HEADER MQTT
		   }

		  uint8_t end_sig = 26;
 8000344:	211f      	movs	r1, #31
 8000346:	187b      	adds	r3, r7, r1
 8000348:	221a      	movs	r2, #26
 800034a:	701a      	strb	r2, [r3, #0]

		  HAL_UART_Transmit(&huart3, &end_sig, 1, 100);
 800034c:	1879      	adds	r1, r7, r1
 800034e:	4843      	ldr	r0, [pc, #268]	; (800045c <main+0x218>)
 8000350:	2364      	movs	r3, #100	; 0x64
 8000352:	2201      	movs	r2, #1
 8000354:	f002 fdb6 	bl	8002ec4 <HAL_UART_Transmit>

		  HAL_Delay(100);
 8000358:	2064      	movs	r0, #100	; 0x64
 800035a:	f000 ff7f 	bl	800125c <HAL_Delay>

		  // SEND MQTT BODY

		  for( int x=0 ; x < 50; x++){
 800035e:	2300      	movs	r3, #0
 8000360:	62bb      	str	r3, [r7, #40]	; 0x28
 8000362:	e047      	b.n	80003f4 <main+0x1b0>



				char message[25];
				sprintf(message,"Fakrouna : %li",session);
 8000364:	4b3e      	ldr	r3, [pc, #248]	; (8000460 <main+0x21c>)
 8000366:	681a      	ldr	r2, [r3, #0]
 8000368:	493e      	ldr	r1, [pc, #248]	; (8000464 <main+0x220>)
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	0018      	movs	r0, r3
 800036e:	f003 ffe5 	bl	800433c <siprintf>
				session++;
 8000372:	4b3b      	ldr	r3, [pc, #236]	; (8000460 <main+0x21c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	1c5a      	adds	r2, r3, #1
 8000378:	4b39      	ldr	r3, [pc, #228]	; (8000460 <main+0x21c>)
 800037a:	601a      	str	r2, [r3, #0]
			  	mqttMessageLength_body = 4 + strlen(topic) + strlen(message);
 800037c:	6a3b      	ldr	r3, [r7, #32]
 800037e:	0018      	movs	r0, r3
 8000380:	f7ff fec2 	bl	8000108 <strlen>
 8000384:	0004      	movs	r4, r0
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	0018      	movs	r0, r3
 800038a:	f7ff febd 	bl	8000108 <strlen>
 800038e:	0003      	movs	r3, r0
 8000390:	18e3      	adds	r3, r4, r3
 8000392:	3304      	adds	r3, #4
 8000394:	001a      	movs	r2, r3
 8000396:	4b34      	ldr	r3, [pc, #208]	; (8000468 <main+0x224>)
 8000398:	601a      	str	r2, [r3, #0]

			  	mqtt_publish_message(mqttMessage_body, topic, message);
 800039a:	1d3a      	adds	r2, r7, #4
 800039c:	6a39      	ldr	r1, [r7, #32]
 800039e:	4b33      	ldr	r3, [pc, #204]	; (800046c <main+0x228>)
 80003a0:	0018      	movs	r0, r3
 80003a2:	f000 fb6e 	bl	8000a82 <mqtt_publish_message>

			  SIM900_SendCommand("AT+CIPSEND\r\n"," ", CMD_DELAY);
 80003a6:	23fa      	movs	r3, #250	; 0xfa
 80003a8:	009a      	lsls	r2, r3, #2
 80003aa:	4931      	ldr	r1, [pc, #196]	; (8000470 <main+0x22c>)
 80003ac:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <main+0x214>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 faac 	bl	800090c <SIM900_SendCommand>

				  for (int k = 0; k < mqttMessageLength_body; k++) {
 80003b4:	2300      	movs	r3, #0
 80003b6:	627b      	str	r3, [r7, #36]	; 0x24
 80003b8:	e00a      	b.n	80003d0 <main+0x18c>

					HAL_UART_Transmit(&huart3, (uint8_t *)&mqttMessage_body[k], 1, 100);
 80003ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003bc:	4b2b      	ldr	r3, [pc, #172]	; (800046c <main+0x228>)
 80003be:	18d1      	adds	r1, r2, r3
 80003c0:	4826      	ldr	r0, [pc, #152]	; (800045c <main+0x218>)
 80003c2:	2364      	movs	r3, #100	; 0x64
 80003c4:	2201      	movs	r2, #1
 80003c6:	f002 fd7d 	bl	8002ec4 <HAL_UART_Transmit>
				  for (int k = 0; k < mqttMessageLength_body; k++) {
 80003ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003cc:	3301      	adds	r3, #1
 80003ce:	627b      	str	r3, [r7, #36]	; 0x24
 80003d0:	4b25      	ldr	r3, [pc, #148]	; (8000468 <main+0x224>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80003d6:	429a      	cmp	r2, r3
 80003d8:	dbef      	blt.n	80003ba <main+0x176>

				  }

				  HAL_UART_Transmit(&huart3, &end_sig, 1, 100);
 80003da:	231f      	movs	r3, #31
 80003dc:	18f9      	adds	r1, r7, r3
 80003de:	481f      	ldr	r0, [pc, #124]	; (800045c <main+0x218>)
 80003e0:	2364      	movs	r3, #100	; 0x64
 80003e2:	2201      	movs	r2, #1
 80003e4:	f002 fd6e 	bl	8002ec4 <HAL_UART_Transmit>
				  HAL_Delay(100);
 80003e8:	2064      	movs	r0, #100	; 0x64
 80003ea:	f000 ff37 	bl	800125c <HAL_Delay>
		  for( int x=0 ; x < 50; x++){
 80003ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f0:	3301      	adds	r3, #1
 80003f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80003f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003f6:	2b31      	cmp	r3, #49	; 0x31
 80003f8:	ddb4      	ble.n	8000364 <main+0x120>
		  }



		  HAL_Delay(100);
 80003fa:	2064      	movs	r0, #100	; 0x64
 80003fc:	f000 ff2e 	bl	800125c <HAL_Delay>


		  SIM900_SendCommand("AT+CIPCLOSE\r\n", "", CMD_DELAY);
 8000400:	23fa      	movs	r3, #250	; 0xfa
 8000402:	009a      	lsls	r2, r3, #2
 8000404:	490a      	ldr	r1, [pc, #40]	; (8000430 <main+0x1ec>)
 8000406:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <main+0x230>)
 8000408:	0018      	movs	r0, r3
 800040a:	f000 fa7f 	bl	800090c <SIM900_SendCommand>


	      HAL_Delay(10000);
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <main+0x234>)
 8000410:	0018      	movs	r0, r3
 8000412:	f000 ff23 	bl	800125c <HAL_Delay>
  {
 8000416:	e76d      	b.n	80002f4 <main+0xb0>
 8000418:	00004e20 	.word	0x00004e20
 800041c:	08004a6c 	.word	0x08004a6c
 8000420:	08004a74 	.word	0x08004a74
 8000424:	08004a7c 	.word	0x08004a7c
 8000428:	08004a8c 	.word	0x08004a8c
 800042c:	08004aac 	.word	0x08004aac
 8000430:	08004ab8 	.word	0x08004ab8
 8000434:	08004abc 	.word	0x08004abc
 8000438:	08004ac8 	.word	0x08004ac8
 800043c:	20000000 	.word	0x20000000
 8000440:	200011b0 	.word	0x200011b0
 8000444:	20001130 	.word	0x20001130
 8000448:	08004ad4 	.word	0x08004ad4
 800044c:	08004ae0 	.word	0x08004ae0
 8000450:	08004ae8 	.word	0x08004ae8
 8000454:	08004b20 	.word	0x08004b20
 8000458:	08004b30 	.word	0x08004b30
 800045c:	20000184 	.word	0x20000184
 8000460:	20001238 	.word	0x20001238
 8000464:	08004b40 	.word	0x08004b40
 8000468:	20001234 	.word	0x20001234
 800046c:	200011b4 	.word	0x200011b4
 8000470:	08004b50 	.word	0x08004b50
 8000474:	08004b54 	.word	0x08004b54
 8000478:	00002710 	.word	0x00002710

0800047c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800047c:	b590      	push	{r4, r7, lr}
 800047e:	b099      	sub	sp, #100	; 0x64
 8000480:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000482:	242c      	movs	r4, #44	; 0x2c
 8000484:	193b      	adds	r3, r7, r4
 8000486:	0018      	movs	r0, r3
 8000488:	2334      	movs	r3, #52	; 0x34
 800048a:	001a      	movs	r2, r3
 800048c:	2100      	movs	r1, #0
 800048e:	f003 fe58 	bl	8004142 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000492:	231c      	movs	r3, #28
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	0018      	movs	r0, r3
 8000498:	2310      	movs	r3, #16
 800049a:	001a      	movs	r2, r3
 800049c:	2100      	movs	r1, #0
 800049e:	f003 fe50 	bl	8004142 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a2:	003b      	movs	r3, r7
 80004a4:	0018      	movs	r0, r3
 80004a6:	231c      	movs	r3, #28
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f003 fe49 	bl	8004142 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80004b0:	0021      	movs	r1, r4
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2222      	movs	r2, #34	; 0x22
 80004b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2201      	movs	r2, #1
 80004c2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2210      	movs	r2, #16
 80004c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2202      	movs	r2, #2
 80004ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	0212      	lsls	r2, r2, #8
 80004d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	0352      	lsls	r2, r2, #13
 80004de:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80004e0:	187b      	adds	r3, r7, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e6:	187b      	adds	r3, r7, r1
 80004e8:	0018      	movs	r0, r3
 80004ea:	f001 fd3b 	bl	8001f64 <HAL_RCC_OscConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004f2:	f000 fb3d 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f6:	211c      	movs	r1, #28
 80004f8:	187b      	adds	r3, r7, r1
 80004fa:	2207      	movs	r2, #7
 80004fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2202      	movs	r2, #2
 8000502:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2101      	movs	r1, #1
 8000514:	0018      	movs	r0, r3
 8000516:	f002 f8ab 	bl	8002670 <HAL_RCC_ClockConfig>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800051e:	f000 fb27 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000522:	003b      	movs	r3, r7
 8000524:	2280      	movs	r2, #128	; 0x80
 8000526:	0292      	lsls	r2, r2, #10
 8000528:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800052a:	003b      	movs	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000530:	003b      	movs	r3, r7
 8000532:	0018      	movs	r0, r3
 8000534:	f002 fa16 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000538:	1e03      	subs	r3, r0, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800053c:	f000 fb18 	bl	8000b70 <Error_Handler>
  }
}
 8000540:	46c0      	nop			; (mov r8, r8)
 8000542:	46bd      	mov	sp, r7
 8000544:	b019      	add	sp, #100	; 0x64
 8000546:	bd90      	pop	{r4, r7, pc}

08000548 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800054c:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_I2C2_Init+0x74>)
 800054e:	4a1c      	ldr	r2, [pc, #112]	; (80005c0 <MX_I2C2_Init+0x78>)
 8000550:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000552:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <MX_I2C2_Init+0x74>)
 8000554:	4a1b      	ldr	r2, [pc, #108]	; (80005c4 <MX_I2C2_Init+0x7c>)
 8000556:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000558:	4b18      	ldr	r3, [pc, #96]	; (80005bc <MX_I2C2_Init+0x74>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800055e:	4b17      	ldr	r3, [pc, #92]	; (80005bc <MX_I2C2_Init+0x74>)
 8000560:	2201      	movs	r2, #1
 8000562:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000564:	4b15      	ldr	r3, [pc, #84]	; (80005bc <MX_I2C2_Init+0x74>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800056a:	4b14      	ldr	r3, [pc, #80]	; (80005bc <MX_I2C2_Init+0x74>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <MX_I2C2_Init+0x74>)
 8000572:	2200      	movs	r2, #0
 8000574:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000576:	4b11      	ldr	r3, [pc, #68]	; (80005bc <MX_I2C2_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800057c:	4b0f      	ldr	r3, [pc, #60]	; (80005bc <MX_I2C2_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000582:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <MX_I2C2_Init+0x74>)
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fa85 	bl	8001a94 <HAL_I2C_Init>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800058e:	f000 faef 	bl	8000b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <MX_I2C2_Init+0x74>)
 8000594:	2100      	movs	r1, #0
 8000596:	0018      	movs	r0, r3
 8000598:	f001 fb12 	bl	8001bc0 <HAL_I2CEx_ConfigAnalogFilter>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80005a0:	f000 fae6 	bl	8000b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MX_I2C2_Init+0x74>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fb55 	bl	8001c58 <HAL_I2CEx_ConfigDigitalFilter>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80005b2:	f000 fadd 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000090 	.word	0x20000090
 80005c0:	40005800 	.word	0x40005800
 80005c4:	20303e5d 	.word	0x20303e5d

080005c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_SPI2_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	; (8000640 <MX_SPI2_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_SPI2_Init+0x74>)
 80005d4:	2282      	movs	r2, #130	; 0x82
 80005d6:	0052      	lsls	r2, r2, #1
 80005d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005da:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_SPI2_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_SPI2_Init+0x74>)
 80005e2:	22c0      	movs	r2, #192	; 0xc0
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_SPI2_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005ee:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_SPI2_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80005f4:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_SPI2_Init+0x74>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	0092      	lsls	r2, r2, #2
 80005fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_SPI2_Init+0x74>)
 80005fe:	2208      	movs	r2, #8
 8000600:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_SPI2_Init+0x74>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_SPI2_Init+0x74>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <MX_SPI2_Init+0x74>)
 8000610:	2200      	movs	r2, #0
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000614:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_SPI2_Init+0x74>)
 8000616:	2207      	movs	r2, #7
 8000618:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_SPI2_Init+0x74>)
 800061c:	2200      	movs	r2, #0
 800061e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_SPI2_Init+0x74>)
 8000622:	2208      	movs	r2, #8
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_SPI2_Init+0x74>)
 8000628:	0018      	movs	r0, r3
 800062a:	f002 fa99 	bl	8002b60 <HAL_SPI_Init>
 800062e:	1e03      	subs	r3, r0, #0
 8000630:	d001      	beq.n	8000636 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 fa9d 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000dc 	.word	0x200000dc
 8000640:	40003800 	.word	0x40003800

08000644 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END TSC_Init 1 */

  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_TSC_Init+0x80>)
 800064a:	4a1f      	ldr	r2, [pc, #124]	; (80006c8 <MX_TSC_Init+0x84>)
 800064c:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_TSC_Init+0x80>)
 8000650:	2280      	movs	r2, #128	; 0x80
 8000652:	0552      	lsls	r2, r2, #21
 8000654:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_TSC_Init+0x80>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	0452      	lsls	r2, r2, #17
 800065c:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_TSC_Init+0x80>)
 8000660:	2200      	movs	r2, #0
 8000662:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_TSC_Init+0x80>)
 8000666:	2201      	movs	r2, #1
 8000668:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_TSC_Init+0x80>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_TSC_Init+0x80>)
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0192      	lsls	r2, r2, #6
 8000676:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_TSC_Init+0x80>)
 800067a:	22a0      	movs	r2, #160	; 0xa0
 800067c:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_TSC_Init+0x80>)
 8000680:	2200      	movs	r2, #0
 8000682:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_TSC_Init+0x80>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_TSC_Init+0x80>)
 800068c:	2200      	movs	r2, #0
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_TSC_Init+0x80>)
 8000692:	222c      	movs	r2, #44	; 0x2c
 8000694:	2100      	movs	r1, #0
 8000696:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_TSC_Init+0x80>)
 800069a:	2291      	movs	r2, #145	; 0x91
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <MX_TSC_Init+0x80>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_TSC_Init+0x80>)
 80006a8:	2291      	movs	r2, #145	; 0x91
 80006aa:	00d2      	lsls	r2, r2, #3
 80006ac:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 80006ae:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <MX_TSC_Init+0x80>)
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 fb0d 	bl	8002cd0 <HAL_TSC_Init>
 80006b6:	1e03      	subs	r3, r0, #0
 80006b8:	d001      	beq.n	80006be <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 80006ba:	f000 fa59 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000140 	.word	0x20000140
 80006c8:	40024000 	.word	0x40024000

080006cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006d2:	4a15      	ldr	r2, [pc, #84]	; (8000728 <MX_USART3_UART_Init+0x5c>)
 80006d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006d6:	4b13      	ldr	r3, [pc, #76]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006d8:	22e1      	movs	r2, #225	; 0xe1
 80006da:	0252      	lsls	r2, r2, #9
 80006dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006de:	4b11      	ldr	r3, [pc, #68]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006f2:	220c      	movs	r2, #12
 80006f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_USART3_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000702:	4b08      	ldr	r3, [pc, #32]	; (8000724 <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_USART3_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070e:	4b05      	ldr	r3, [pc, #20]	; (8000724 <MX_USART3_UART_Init+0x58>)
 8000710:	0018      	movs	r0, r3
 8000712:	f002 fb83 	bl	8002e1c <HAL_UART_Init>
 8000716:	1e03      	subs	r3, r0, #0
 8000718:	d001      	beq.n	800071e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800071a:	f000 fa29 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000184 	.word	0x20000184
 8000728:	40004800 	.word	0x40004800

0800072c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART4_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 38400;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000738:	2296      	movs	r2, #150	; 0x96
 800073a:	0212      	lsls	r2, r2, #8
 800073c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART4_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART4_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART4_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_USART4_UART_Init+0x58>)
 8000770:	0018      	movs	r0, r3
 8000772:	f002 fb53 	bl	8002e1c <HAL_UART_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 f9f9 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000208 	.word	0x20000208
 8000788:	40004c00 	.word	0x40004c00

0800078c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <MX_USB_PCD_Init+0x48>)
 8000794:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 8000798:	2208      	movs	r2, #8
 800079a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 800079e:	2202      	movs	r2, #2
 80007a0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 80007a4:	2202      	movs	r2, #2
 80007a6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80007a8:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80007b4:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <MX_USB_PCD_Init+0x44>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fa97 	bl	8001cf0 <HAL_PCD_Init>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80007c6:	f000 f9d3 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200002d0 	.word	0x200002d0
 80007d4:	40005c00 	.word	0x40005c00

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_DMA_Init+0x38>)
 80007e0:	695a      	ldr	r2, [r3, #20]
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <MX_DMA_Init+0x38>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_DMA_Init+0x38>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	200a      	movs	r0, #10
 80007fc:	f000 fdfe 	bl	80013fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000800:	200a      	movs	r0, #10
 8000802:	f000 fe10 	bl	8001426 <HAL_NVIC_EnableIRQ>

}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021000 	.word	0x40021000

08000814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b089      	sub	sp, #36	; 0x24
 8000818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081a:	240c      	movs	r4, #12
 800081c:	193b      	adds	r3, r7, r4
 800081e:	0018      	movs	r0, r3
 8000820:	2314      	movs	r3, #20
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f003 fc8c 	bl	8004142 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800082a:	4b35      	ldr	r3, [pc, #212]	; (8000900 <MX_GPIO_Init+0xec>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <MX_GPIO_Init+0xec>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0309      	lsls	r1, r1, #12
 8000834:	430a      	orrs	r2, r1
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	4b31      	ldr	r3, [pc, #196]	; (8000900 <MX_GPIO_Init+0xec>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	031b      	lsls	r3, r3, #12
 8000840:	4013      	ands	r3, r2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <MX_GPIO_Init+0xec>)
 8000848:	695a      	ldr	r2, [r3, #20]
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0xec>)
 800084c:	2180      	movs	r1, #128	; 0x80
 800084e:	0289      	lsls	r1, r1, #10
 8000850:	430a      	orrs	r2, r1
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	4b2a      	ldr	r3, [pc, #168]	; (8000900 <MX_GPIO_Init+0xec>)
 8000856:	695a      	ldr	r2, [r3, #20]
 8000858:	2380      	movs	r3, #128	; 0x80
 800085a:	029b      	lsls	r3, r3, #10
 800085c:	4013      	ands	r3, r2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000862:	4b27      	ldr	r3, [pc, #156]	; (8000900 <MX_GPIO_Init+0xec>)
 8000864:	695a      	ldr	r2, [r3, #20]
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0xec>)
 8000868:	2180      	movs	r1, #128	; 0x80
 800086a:	02c9      	lsls	r1, r1, #11
 800086c:	430a      	orrs	r2, r1
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xec>)
 8000872:	695a      	ldr	r2, [r3, #20]
 8000874:	2380      	movs	r3, #128	; 0x80
 8000876:	02db      	lsls	r3, r3, #11
 8000878:	4013      	ands	r3, r2
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 800087e:	4921      	ldr	r1, [pc, #132]	; (8000904 <MX_GPIO_Init+0xf0>)
 8000880:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_GPIO_Init+0xf4>)
 8000882:	2200      	movs	r2, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f001 f8e7 	bl	8001a58 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 800088a:	193b      	adds	r3, r7, r4
 800088c:	4a1d      	ldr	r2, [pc, #116]	; (8000904 <MX_GPIO_Init+0xf0>)
 800088e:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2201      	movs	r2, #1
 8000894:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	193b      	adds	r3, r7, r4
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_GPIO_Init+0xf4>)
 80008a6:	0019      	movs	r1, r3
 80008a8:	0010      	movs	r0, r2
 80008aa:	f000 ff5d 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80008ae:	0021      	movs	r1, r4
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2206      	movs	r2, #6
 80008b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2290      	movs	r2, #144	; 0x90
 80008ba:	0352      	lsls	r2, r2, #13
 80008bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008c4:	000c      	movs	r4, r1
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <MX_GPIO_Init+0xf4>)
 80008ca:	0019      	movs	r1, r3
 80008cc:	0010      	movs	r0, r2
 80008ce:	f000 ff4b 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d2:	0021      	movs	r1, r4
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2201      	movs	r2, #1
 80008d8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2290      	movs	r2, #144	; 0x90
 80008de:	0352      	lsls	r2, r2, #13
 80008e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	187b      	adds	r3, r7, r1
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e8:	187a      	adds	r2, r7, r1
 80008ea:	2390      	movs	r3, #144	; 0x90
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 ff39 	bl	8001768 <HAL_GPIO_Init>

}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	46bd      	mov	sp, r7
 80008fa:	b009      	add	sp, #36	; 0x24
 80008fc:	bd90      	pop	{r4, r7, pc}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	40021000 	.word	0x40021000
 8000904:	000003e1 	.word	0x000003e1
 8000908:	48000800 	.word	0x48000800

0800090c <SIM900_SendCommand>:


}

int SIM900_SendCommand(const char *command, char *reply, uint16_t delay)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	1dbb      	adds	r3, r7, #6
 8000918:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit_IT(&huart3, (unsigned char *)command,
                         (uint16_t)strlen(command));
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff fbf3 	bl	8000108 <strlen>
 8000922:	0003      	movs	r3, r0
    HAL_UART_Transmit_IT(&huart3, (unsigned char *)command,
 8000924:	b29a      	uxth	r2, r3
 8000926:	68f9      	ldr	r1, [r7, #12]
 8000928:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <SIM900_SendCommand+0x54>)
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fb74 	bl	8003018 <HAL_UART_Transmit_IT>
    HAL_Delay(delay);
 8000930:	1dbb      	adds	r3, r7, #6
 8000932:	881b      	ldrh	r3, [r3, #0]
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fc91 	bl	800125c <HAL_Delay>



    if (strstr(mqtt_buffer, reply) != NULL)
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <SIM900_SendCommand+0x58>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f003 fd1b 	bl	800437c <strstr>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d003      	beq.n	8000952 <SIM900_SendCommand+0x46>
    {
        clearRxBuffer();
 800094a:	f000 f80d 	bl	8000968 <clearRxBuffer>
        return 0;
 800094e:	2300      	movs	r3, #0
 8000950:	e002      	b.n	8000958 <SIM900_SendCommand+0x4c>
    }
    clearRxBuffer();
 8000952:	f000 f809 	bl	8000968 <clearRxBuffer>
    return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	0018      	movs	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	b004      	add	sp, #16
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000184 	.word	0x20000184
 8000964:	20000b7c 	.word	0x20000b7c

08000968 <clearRxBuffer>:

void clearRxBuffer(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    rx_index = 0;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <clearRxBuffer+0x1c>)
 800096e:	2200      	movs	r2, #0
 8000970:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <clearRxBuffer+0x20>)
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <clearRxBuffer+0x24>)
 8000976:	2100      	movs	r1, #0
 8000978:	0018      	movs	r0, r3
 800097a:	f003 fbe2 	bl	8004142 <memset>
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000b78 	.word	0x20000b78
 8000988:	000005b4 	.word	0x000005b4
 800098c:	200005c4 	.word	0x200005c4

08000990 <mqtt_connect_message>:
*/

}


void mqtt_connect_message(uint8_t * mqtt_message, char * client_id) {
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]

uint8_t i = 0;
 800099a:	240f      	movs	r4, #15
 800099c:	193b      	adds	r3, r7, r4
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
uint8_t client_id_length = strlen(client_id);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fbaf 	bl	8000108 <strlen>
 80009aa:	0002      	movs	r2, r0
 80009ac:	210e      	movs	r1, #14
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	701a      	strb	r2, [r3, #0]

mqtt_message[0] = 16;                      // MQTT Message Type CONNECT
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2210      	movs	r2, #16
 80009b6:	701a      	strb	r2, [r3, #0]
mqtt_message[1] = 14 + client_id_length;   // Remaining length of the message
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	187a      	adds	r2, r7, r1
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	320e      	adds	r2, #14
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	701a      	strb	r2, [r3, #0]

mqtt_message[2] = 0;                       // Protocol Name Length MSB
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3302      	adds	r3, #2
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
mqtt_message[3] = 6;                       // Protocol Name Length LSB
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3303      	adds	r3, #3
 80009d2:	2206      	movs	r2, #6
 80009d4:	701a      	strb	r2, [r3, #0]
mqtt_message[4] = 77;                      // ASCII Code for M
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	3304      	adds	r3, #4
 80009da:	224d      	movs	r2, #77	; 0x4d
 80009dc:	701a      	strb	r2, [r3, #0]
mqtt_message[5] = 81;                      // ASCII Code for Q
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3305      	adds	r3, #5
 80009e2:	2251      	movs	r2, #81	; 0x51
 80009e4:	701a      	strb	r2, [r3, #0]
mqtt_message[6] = 73;                      // ASCII Code for I
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3306      	adds	r3, #6
 80009ea:	2249      	movs	r2, #73	; 0x49
 80009ec:	701a      	strb	r2, [r3, #0]
mqtt_message[7] = 115;                     // ASCII Code for s
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3307      	adds	r3, #7
 80009f2:	2273      	movs	r2, #115	; 0x73
 80009f4:	701a      	strb	r2, [r3, #0]
mqtt_message[8] = 100;                     // ASCII Code for d
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	3308      	adds	r3, #8
 80009fa:	2264      	movs	r2, #100	; 0x64
 80009fc:	701a      	strb	r2, [r3, #0]
mqtt_message[9] = 112;                     // ASCII Code for p
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	3309      	adds	r3, #9
 8000a02:	2270      	movs	r2, #112	; 0x70
 8000a04:	701a      	strb	r2, [r3, #0]
mqtt_message[10] = 3;                      // MQTT Protocol version = 3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	330a      	adds	r3, #10
 8000a0a:	2203      	movs	r2, #3
 8000a0c:	701a      	strb	r2, [r3, #0]
mqtt_message[11] = 2;                      // conn flags
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	330b      	adds	r3, #11
 8000a12:	2202      	movs	r2, #2
 8000a14:	701a      	strb	r2, [r3, #0]
mqtt_message[12] = 0;                      // Keep-alive Time Length MSB
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	701a      	strb	r2, [r3, #0]
mqtt_message[13] = 15;                     // Keep-alive Time Length LSB
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	330d      	adds	r3, #13
 8000a22:	220f      	movs	r2, #15
 8000a24:	701a      	strb	r2, [r3, #0]


mqtt_message[14] = 0;                      // Client ID length MSB
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	330e      	adds	r3, #14
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
mqtt_message[15] = client_id_length;       // Client ID length LSB
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	330f      	adds	r3, #15
 8000a32:	187a      	adds	r2, r7, r1
 8000a34:	7812      	ldrb	r2, [r2, #0]
 8000a36:	701a      	strb	r2, [r3, #0]

// Client ID
for(i = 0; i < client_id_length + 16; i++){
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e011      	b.n	8000a64 <mqtt_connect_message+0xd4>
mqtt_message[16 + i] = client_id[i];
 8000a40:	200f      	movs	r0, #15
 8000a42:	183b      	adds	r3, r7, r0
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	683a      	ldr	r2, [r7, #0]
 8000a48:	18d2      	adds	r2, r2, r3
 8000a4a:	183b      	adds	r3, r7, r0
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	3310      	adds	r3, #16
 8000a50:	0019      	movs	r1, r3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	185b      	adds	r3, r3, r1
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	701a      	strb	r2, [r3, #0]
for(i = 0; i < client_id_length + 16; i++){
 8000a5a:	183b      	adds	r3, r7, r0
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	183b      	adds	r3, r7, r0
 8000a60:	3201      	adds	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	230e      	movs	r3, #14
 8000a66:	18fb      	adds	r3, r7, r3
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	330f      	adds	r3, #15
 8000a6c:	001a      	movs	r2, r3
 8000a6e:	230f      	movs	r3, #15
 8000a70:	18fb      	adds	r3, r7, r3
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dae3      	bge.n	8000a40 <mqtt_connect_message+0xb0>
}

}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b005      	add	sp, #20
 8000a80:	bd90      	pop	{r4, r7, pc}

08000a82 <mqtt_publish_message>:

void mqtt_publish_message(uint8_t * mqtt_message, char * topic, char * message) {
 8000a82:	b5b0      	push	{r4, r5, r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]

uint8_t i = 0;
 8000a8e:	2517      	movs	r5, #23
 8000a90:	197b      	adds	r3, r7, r5
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
uint8_t topic_length = strlen(topic);
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fb35 	bl	8000108 <strlen>
 8000a9e:	0002      	movs	r2, r0
 8000aa0:	2416      	movs	r4, #22
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	701a      	strb	r2, [r3, #0]
uint8_t message_length = strlen(message);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f7ff fb2d 	bl	8000108 <strlen>
 8000aae:	0002      	movs	r2, r0
 8000ab0:	2015      	movs	r0, #21
 8000ab2:	183b      	adds	r3, r7, r0
 8000ab4:	701a      	strb	r2, [r3, #0]

mqtt_message[0] = 48;                                  // MQTT Message Type CONNECT
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2230      	movs	r2, #48	; 0x30
 8000aba:	701a      	strb	r2, [r3, #0]
mqtt_message[1] = 2 + topic_length + message_length;   // Remaining length
 8000abc:	0021      	movs	r1, r4
 8000abe:	187a      	adds	r2, r7, r1
 8000ac0:	183b      	adds	r3, r7, r0
 8000ac2:	7812      	ldrb	r2, [r2, #0]
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	3301      	adds	r3, #1
 8000ace:	3202      	adds	r2, #2
 8000ad0:	b2d2      	uxtb	r2, r2
 8000ad2:	701a      	strb	r2, [r3, #0]
mqtt_message[2] = 0;                                   // MQTT Message Type CONNECT
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
mqtt_message[3] = topic_length;                        // MQTT Message Type CONNECT
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	3303      	adds	r3, #3
 8000ae0:	187a      	adds	r2, r7, r1
 8000ae2:	7812      	ldrb	r2, [r2, #0]
 8000ae4:	701a      	strb	r2, [r3, #0]

// Topic
for(i = 0; i < topic_length; i++){
 8000ae6:	197b      	adds	r3, r7, r5
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
 8000aec:	e011      	b.n	8000b12 <mqtt_publish_message+0x90>
mqtt_message[4 + i] = topic[i];
 8000aee:	2017      	movs	r0, #23
 8000af0:	183b      	adds	r3, r7, r0
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	68ba      	ldr	r2, [r7, #8]
 8000af6:	18d2      	adds	r2, r2, r3
 8000af8:	183b      	adds	r3, r7, r0
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	3304      	adds	r3, #4
 8000afe:	0019      	movs	r1, r3
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	185b      	adds	r3, r3, r1
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	701a      	strb	r2, [r3, #0]
for(i = 0; i < topic_length; i++){
 8000b08:	183b      	adds	r3, r7, r0
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	183b      	adds	r3, r7, r0
 8000b0e:	3201      	adds	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	2117      	movs	r1, #23
 8000b14:	187a      	adds	r2, r7, r1
 8000b16:	2316      	movs	r3, #22
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d3e5      	bcc.n	8000aee <mqtt_publish_message+0x6c>
}

// Message
for(i = 0; i < message_length; i++){
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	701a      	strb	r2, [r3, #0]
 8000b28:	e015      	b.n	8000b56 <mqtt_publish_message+0xd4>
mqtt_message[4 + topic_length + i] = message[i];
 8000b2a:	2017      	movs	r0, #23
 8000b2c:	183b      	adds	r3, r7, r0
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	687a      	ldr	r2, [r7, #4]
 8000b32:	18d2      	adds	r2, r2, r3
 8000b34:	2316      	movs	r3, #22
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	1d19      	adds	r1, r3, #4
 8000b3c:	183b      	adds	r3, r7, r0
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	18cb      	adds	r3, r1, r3
 8000b42:	0019      	movs	r1, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	185b      	adds	r3, r3, r1
 8000b48:	7812      	ldrb	r2, [r2, #0]
 8000b4a:	701a      	strb	r2, [r3, #0]
for(i = 0; i < message_length; i++){
 8000b4c:	183b      	adds	r3, r7, r0
 8000b4e:	781a      	ldrb	r2, [r3, #0]
 8000b50:	183b      	adds	r3, r7, r0
 8000b52:	3201      	adds	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	2317      	movs	r3, #23
 8000b58:	18fa      	adds	r2, r7, r3
 8000b5a:	2315      	movs	r3, #21
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d3e1      	bcc.n	8000b2a <mqtt_publish_message+0xa8>
}

}
 8000b66:	46c0      	nop			; (mov r8, r8)
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bdb0      	pop	{r4, r5, r7, pc}

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b84:	699a      	ldr	r2, [r3, #24]
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	619a      	str	r2, [r3, #24]
 8000b8e:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	2201      	movs	r2, #1
 8000b94:	4013      	ands	r3, r2
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_MspInit+0x44>)
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_MspInit+0x44>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	0549      	lsls	r1, r1, #21
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	61da      	str	r2, [r3, #28]
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_MspInit+0x44>)
 8000baa:	69da      	ldr	r2, [r3, #28]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	055b      	lsls	r3, r3, #21
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb6:	46c0      	nop			; (mov r8, r8)
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b08b      	sub	sp, #44	; 0x2c
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	2414      	movs	r4, #20
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f003 fab3 	bl	8004142 <memset>
  if(hi2c->Instance==I2C2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a1c      	ldr	r2, [pc, #112]	; (8000c54 <HAL_I2C_MspInit+0x90>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d132      	bne.n	8000c4c <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <HAL_I2C_MspInit+0x94>)
 8000be8:	695a      	ldr	r2, [r3, #20]
 8000bea:	4b1b      	ldr	r3, [pc, #108]	; (8000c58 <HAL_I2C_MspInit+0x94>)
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	02c9      	lsls	r1, r1, #11
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	615a      	str	r2, [r3, #20]
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_I2C_MspInit+0x94>)
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	02db      	lsls	r3, r3, #11
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	22c0      	movs	r2, #192	; 0xc0
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2212      	movs	r2, #18
 8000c10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2201      	movs	r2, #1
 8000c16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2201      	movs	r2, #1
 8000c22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_I2C_MspInit+0x98>)
 8000c28:	0019      	movs	r1, r3
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	f000 fd9c 	bl	8001768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_I2C_MspInit+0x94>)
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_I2C_MspInit+0x94>)
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	03c9      	lsls	r1, r1, #15
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	61da      	str	r2, [r3, #28]
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_I2C_MspInit+0x94>)
 8000c40:	69da      	ldr	r2, [r3, #28]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	03db      	lsls	r3, r3, #15
 8000c46:	4013      	ands	r3, r2
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c4c:	46c0      	nop			; (mov r8, r8)
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b00b      	add	sp, #44	; 0x2c
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	40005800 	.word	0x40005800
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000400 	.word	0x48000400

08000c60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b08b      	sub	sp, #44	; 0x2c
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	2414      	movs	r4, #20
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	2314      	movs	r3, #20
 8000c70:	001a      	movs	r2, r3
 8000c72:	2100      	movs	r1, #0
 8000c74:	f003 fa65 	bl	8004142 <memset>
  if(hspi->Instance==SPI2)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1c      	ldr	r2, [pc, #112]	; (8000cf0 <HAL_SPI_MspInit+0x90>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d132      	bne.n	8000ce8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_SPI_MspInit+0x94>)
 8000c84:	69da      	ldr	r2, [r3, #28]
 8000c86:	4b1b      	ldr	r3, [pc, #108]	; (8000cf4 <HAL_SPI_MspInit+0x94>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	01c9      	lsls	r1, r1, #7
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	61da      	str	r2, [r3, #28]
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_SPI_MspInit+0x94>)
 8000c92:	69da      	ldr	r2, [r3, #28]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	01db      	lsls	r3, r3, #7
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_SPI_MspInit+0x94>)
 8000ca0:	695a      	ldr	r2, [r3, #20]
 8000ca2:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <HAL_SPI_MspInit+0x94>)
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	02c9      	lsls	r1, r1, #11
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_SPI_MspInit+0x94>)
 8000cae:	695a      	ldr	r2, [r3, #20]
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	02db      	lsls	r3, r3, #11
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 8000cba:	193b      	adds	r3, r7, r4
 8000cbc:	22e0      	movs	r2, #224	; 0xe0
 8000cbe:	0212      	lsls	r2, r2, #8
 8000cc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	0021      	movs	r1, r4
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2202      	movs	r2, #2
 8000cc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <HAL_SPI_MspInit+0x98>)
 8000ce0:	0019      	movs	r1, r3
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	f000 fd40 	bl	8001768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b00b      	add	sp, #44	; 0x2c
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	40003800 	.word	0x40003800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000400 	.word	0x48000400

08000cfc <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b08b      	sub	sp, #44	; 0x2c
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	2414      	movs	r4, #20
 8000d06:	193b      	adds	r3, r7, r4
 8000d08:	0018      	movs	r0, r3
 8000d0a:	2314      	movs	r3, #20
 8000d0c:	001a      	movs	r2, r3
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f003 fa17 	bl	8004142 <memset>
  if(htsc->Instance==TSC)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a44      	ldr	r2, [pc, #272]	; (8000e2c <HAL_TSC_MspInit+0x130>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d000      	beq.n	8000d20 <HAL_TSC_MspInit+0x24>
 8000d1e:	e080      	b.n	8000e22 <HAL_TSC_MspInit+0x126>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 8000d20:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	0449      	lsls	r1, r1, #17
 8000d2a:	430a      	orrs	r2, r1
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	045b      	lsls	r3, r3, #17
 8000d36:	4013      	ands	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b3c      	ldr	r3, [pc, #240]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	4b3b      	ldr	r3, [pc, #236]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0289      	lsls	r1, r1, #10
 8000d46:	430a      	orrs	r2, r1
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	4b39      	ldr	r3, [pc, #228]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	029b      	lsls	r3, r3, #10
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b35      	ldr	r3, [pc, #212]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	4b34      	ldr	r3, [pc, #208]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d5e:	2180      	movs	r1, #128	; 0x80
 8000d60:	02c9      	lsls	r1, r1, #11
 8000d62:	430a      	orrs	r2, r1
 8000d64:	615a      	str	r2, [r3, #20]
 8000d66:	4b32      	ldr	r3, [pc, #200]	; (8000e30 <HAL_TSC_MspInit+0x134>)
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	02db      	lsls	r3, r3, #11
 8000d6e:	4013      	ands	r3, r2
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2244      	movs	r2, #68	; 0x44
 8000d78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	193b      	adds	r3, r7, r4
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	2203      	movs	r2, #3
 8000d90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d92:	193a      	adds	r2, r7, r4
 8000d94:	2390      	movs	r3, #144	; 0x90
 8000d96:	05db      	lsls	r3, r3, #23
 8000d98:	0011      	movs	r1, r2
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 fce4 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2288      	movs	r2, #136	; 0x88
 8000da4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2212      	movs	r2, #18
 8000daa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2203      	movs	r2, #3
 8000dbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	193a      	adds	r2, r7, r4
 8000dc0:	2390      	movs	r3, #144	; 0x90
 8000dc2:	05db      	lsls	r3, r3, #23
 8000dc4:	0011      	movs	r1, r2
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 fcce 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2201      	movs	r2, #1
 8000dd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2203      	movs	r2, #3
 8000de8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	4a11      	ldr	r2, [pc, #68]	; (8000e34 <HAL_TSC_MspInit+0x138>)
 8000dee:	0019      	movs	r1, r3
 8000df0:	0010      	movs	r0, r2
 8000df2:	f000 fcb9 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000df6:	0021      	movs	r1, r4
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2212      	movs	r2, #18
 8000e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2203      	movs	r2, #3
 8000e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	4a06      	ldr	r2, [pc, #24]	; (8000e34 <HAL_TSC_MspInit+0x138>)
 8000e1a:	0019      	movs	r1, r3
 8000e1c:	0010      	movs	r0, r2
 8000e1e:	f000 fca3 	bl	8001768 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b00b      	add	sp, #44	; 0x2c
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	40024000 	.word	0x40024000
 8000e30:	40021000 	.word	0x40021000
 8000e34:	48000400 	.word	0x48000400

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b08d      	sub	sp, #52	; 0x34
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	241c      	movs	r4, #28
 8000e42:	193b      	adds	r3, r7, r4
 8000e44:	0018      	movs	r0, r3
 8000e46:	2314      	movs	r3, #20
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f003 f979 	bl	8004142 <memset>
  if(huart->Instance==USART3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a6a      	ldr	r2, [pc, #424]	; (8001000 <HAL_UART_MspInit+0x1c8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d168      	bne.n	8000f2c <HAL_UART_MspInit+0xf4>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e5a:	4b6a      	ldr	r3, [pc, #424]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000e5c:	69da      	ldr	r2, [r3, #28]
 8000e5e:	4b69      	ldr	r3, [pc, #420]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000e60:	2180      	movs	r1, #128	; 0x80
 8000e62:	02c9      	lsls	r1, r1, #11
 8000e64:	430a      	orrs	r2, r1
 8000e66:	61da      	str	r2, [r3, #28]
 8000e68:	4b66      	ldr	r3, [pc, #408]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000e6a:	69da      	ldr	r2, [r3, #28]
 8000e6c:	2380      	movs	r3, #128	; 0x80
 8000e6e:	02db      	lsls	r3, r3, #11
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e76:	4b63      	ldr	r3, [pc, #396]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	4b62      	ldr	r3, [pc, #392]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	0309      	lsls	r1, r1, #12
 8000e80:	430a      	orrs	r2, r1
 8000e82:	615a      	str	r2, [r3, #20]
 8000e84:	4b5f      	ldr	r3, [pc, #380]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000e86:	695a      	ldr	r2, [r3, #20]
 8000e88:	2380      	movs	r3, #128	; 0x80
 8000e8a:	031b      	lsls	r3, r3, #12
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11;
 8000e92:	193b      	adds	r3, r7, r4
 8000e94:	2281      	movs	r2, #129	; 0x81
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	4a54      	ldr	r2, [pc, #336]	; (8001008 <HAL_UART_MspInit+0x1d0>)
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0010      	movs	r0, r2
 8000ebc:	f000 fc54 	bl	8001768 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8000ec0:	4b52      	ldr	r3, [pc, #328]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ec2:	4a53      	ldr	r2, [pc, #332]	; (8001010 <HAL_UART_MspInit+0x1d8>)
 8000ec4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ec6:	4b51      	ldr	r3, [pc, #324]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ecc:	4b4f      	ldr	r3, [pc, #316]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ed2:	4b4e      	ldr	r3, [pc, #312]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ed8:	4b4c      	ldr	r3, [pc, #304]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000ee4:	4b49      	ldr	r3, [pc, #292]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ee6:	2220      	movs	r2, #32
 8000ee8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eea:	4b48      	ldr	r3, [pc, #288]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ef0:	4b46      	ldr	r3, [pc, #280]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 fab4 	bl	8001460 <HAL_DMA_Init>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000efc:	f7ff fe38 	bl	8000b70 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(DMA_REMAP_USART3_DMA_CH32);
 8000f00:	4b44      	ldr	r3, [pc, #272]	; (8001014 <HAL_UART_MspInit+0x1dc>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4b43      	ldr	r3, [pc, #268]	; (8001014 <HAL_UART_MspInit+0x1dc>)
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	04c9      	lsls	r1, r1, #19
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	601a      	str	r2, [r3, #0]

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a3e      	ldr	r2, [pc, #248]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000f12:	671a      	str	r2, [r3, #112]	; 0x70
 8000f14:	4b3d      	ldr	r3, [pc, #244]	; (800100c <HAL_UART_MspInit+0x1d4>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	201d      	movs	r0, #29
 8000f20:	f000 fa6c 	bl	80013fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000f24:	201d      	movs	r0, #29
 8000f26:	f000 fa7e 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000f2a:	e064      	b.n	8000ff6 <HAL_UART_MspInit+0x1be>
  else if(huart->Instance==USART4)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a39      	ldr	r2, [pc, #228]	; (8001018 <HAL_UART_MspInit+0x1e0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d15f      	bne.n	8000ff6 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000f36:	4b33      	ldr	r3, [pc, #204]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f38:	69da      	ldr	r2, [r3, #28]
 8000f3a:	4b32      	ldr	r3, [pc, #200]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	0309      	lsls	r1, r1, #12
 8000f40:	430a      	orrs	r2, r1
 8000f42:	61da      	str	r2, [r3, #28]
 8000f44:	4b2f      	ldr	r3, [pc, #188]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f46:	69da      	ldr	r2, [r3, #28]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	031b      	lsls	r3, r3, #12
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b2c      	ldr	r3, [pc, #176]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f54:	695a      	ldr	r2, [r3, #20]
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f58:	2180      	movs	r1, #128	; 0x80
 8000f5a:	0289      	lsls	r1, r1, #10
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	615a      	str	r2, [r3, #20]
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f62:	695a      	ldr	r2, [r3, #20]
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	029b      	lsls	r3, r3, #10
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f70:	695a      	ldr	r2, [r3, #20]
 8000f72:	4b24      	ldr	r3, [pc, #144]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f74:	2180      	movs	r1, #128	; 0x80
 8000f76:	0309      	lsls	r1, r1, #12
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	615a      	str	r2, [r3, #20]
 8000f7c:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_UART_MspInit+0x1cc>)
 8000f7e:	695a      	ldr	r2, [r3, #20]
 8000f80:	2380      	movs	r3, #128	; 0x80
 8000f82:	031b      	lsls	r3, r3, #12
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f8a:	241c      	movs	r4, #28
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	2202      	movs	r2, #2
 8000f90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	193b      	adds	r3, r7, r4
 8000f94:	2202      	movs	r2, #2
 8000f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	193b      	adds	r3, r7, r4
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	193a      	adds	r2, r7, r4
 8000fac:	2390      	movs	r3, #144	; 0x90
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fbd8 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb8:	0021      	movs	r1, r4
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2280      	movs	r2, #128	; 0x80
 8000fbe:	00d2      	lsls	r2, r2, #3
 8000fc0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2200      	movs	r2, #0
 8000fcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART4;
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	187b      	adds	r3, r7, r1
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_UART_MspInit+0x1d0>)
 8000fde:	0019      	movs	r1, r3
 8000fe0:	0010      	movs	r0, r2
 8000fe2:	f000 fbc1 	bl	8001768 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	201d      	movs	r0, #29
 8000fec:	f000 fa06 	bl	80013fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000ff0:	201d      	movs	r0, #29
 8000ff2:	f000 fa18 	bl	8001426 <HAL_NVIC_EnableIRQ>
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b00d      	add	sp, #52	; 0x34
 8000ffc:	bd90      	pop	{r4, r7, pc}
 8000ffe:	46c0      	nop			; (mov r8, r8)
 8001000:	40004800 	.word	0x40004800
 8001004:	40021000 	.word	0x40021000
 8001008:	48000800 	.word	0x48000800
 800100c:	2000028c 	.word	0x2000028c
 8001010:	40020030 	.word	0x40020030
 8001014:	40010000 	.word	0x40010000
 8001018:	40004c00 	.word	0x40004c00

0800101c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_PCD_MspInit+0x38>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d10d      	bne.n	800104a <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800102e:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <HAL_PCD_MspInit+0x3c>)
 8001030:	69da      	ldr	r2, [r3, #28]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_PCD_MspInit+0x3c>)
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0409      	lsls	r1, r1, #16
 8001038:	430a      	orrs	r2, r1
 800103a:	61da      	str	r2, [r3, #28]
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_PCD_MspInit+0x3c>)
 800103e:	69da      	ldr	r2, [r3, #28]
 8001040:	2380      	movs	r3, #128	; 0x80
 8001042:	041b      	lsls	r3, r3, #16
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b004      	add	sp, #16
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	40005c00 	.word	0x40005c00
 8001058:	40021000 	.word	0x40021000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800106c:	46c0      	nop			; (mov r8, r8)
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8d0 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	46c0      	nop			; (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001092:	0018      	movs	r0, r3
 8001094:	f000 faa9 	bl	80015ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	2000028c 	.word	0x2000028c

080010a4 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 global interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010a8:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <USART3_4_IRQHandler+0x1c>)
 80010aa:	0018      	movs	r0, r3
 80010ac:	f002 f834 	bl	8003118 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <USART3_4_IRQHandler+0x20>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f002 f830 	bl	8003118 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	20000184 	.word	0x20000184
 80010c4:	20000208 	.word	0x20000208

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f002 fff0 	bl	80040dc <__errno>
 80010fc:	0003      	movs	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	2301      	movs	r3, #1
 8001104:	425b      	negs	r3, r3
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	18d2      	adds	r2, r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b006      	add	sp, #24
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004000 	.word	0x20004000
 8001128:	00000400 	.word	0x00000400
 800112c:	2000123c 	.word	0x2000123c
 8001130:	20001258 	.word	0x20001258

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800116a:	f7ff ffe3 	bl	8001134 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800116e:	f002 ffbb 	bl	80040e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff f867 	bl	8000244 <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   r0, =_estack
 8001178:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001184:	08004c34 	.word	0x08004c34
  ldr r2, =_sbss
 8001188:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800118c:	20001254 	.word	0x20001254

08001190 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_COMP_IRQHandler>
	...

08001194 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_Init+0x24>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_Init+0x24>)
 800119e:	2110      	movs	r1, #16
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f809 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fce7 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_InitTick+0x5c>)
 80011c6:	681c      	ldr	r4, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	0019      	movs	r1, r3
 80011ce:	23fa      	movs	r3, #250	; 0xfa
 80011d0:	0098      	lsls	r0, r3, #2
 80011d2:	f7fe ffab 	bl	800012c <__udivsi3>
 80011d6:	0003      	movs	r3, r0
 80011d8:	0019      	movs	r1, r3
 80011da:	0020      	movs	r0, r4
 80011dc:	f7fe ffa6 	bl	800012c <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f92f 	bl	8001446 <HAL_SYSTICK_Config>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00f      	b.n	8001210 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d80b      	bhi.n	800120e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f8fc 	bl	80013fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_InitTick+0x64>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b003      	add	sp, #12
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	20000004 	.word	0x20000004
 800121c:	2000000c 	.word	0x2000000c
 8001220:	20000008 	.word	0x20000008

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x20>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	18d2      	adds	r2, r2, r3
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_IncTick+0x20>)
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	2000000c 	.word	0x2000000c
 8001244:	20001240 	.word	0x20001240

08001248 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_GetTick+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	20001240 	.word	0x20001240

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fff0 	bl	8001248 <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	189b      	adds	r3, r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	f7ff ffe0 	bl	8001248 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	2000000c 	.word	0x2000000c

080012a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0002      	movs	r2, r0
 80012ac:	1dfb      	adds	r3, r7, #7
 80012ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b7f      	cmp	r3, #127	; 0x7f
 80012b6:	d809      	bhi.n	80012cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b8:	1dfb      	adds	r3, r7, #7
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	001a      	movs	r2, r3
 80012be:	231f      	movs	r3, #31
 80012c0:	401a      	ands	r2, r3
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <__NVIC_EnableIRQ+0x30>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	4091      	lsls	r1, r2
 80012c8:	000a      	movs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
  }
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	e000e100 	.word	0xe000e100

080012d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	0002      	movs	r2, r0
 80012e0:	6039      	str	r1, [r7, #0]
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b7f      	cmp	r3, #127	; 0x7f
 80012ec:	d828      	bhi.n	8001340 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ee:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <__NVIC_SetPriority+0xd4>)
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	33c0      	adds	r3, #192	; 0xc0
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	589b      	ldr	r3, [r3, r2]
 80012fe:	1dfa      	adds	r2, r7, #7
 8001300:	7812      	ldrb	r2, [r2, #0]
 8001302:	0011      	movs	r1, r2
 8001304:	2203      	movs	r2, #3
 8001306:	400a      	ands	r2, r1
 8001308:	00d2      	lsls	r2, r2, #3
 800130a:	21ff      	movs	r1, #255	; 0xff
 800130c:	4091      	lsls	r1, r2
 800130e:	000a      	movs	r2, r1
 8001310:	43d2      	mvns	r2, r2
 8001312:	401a      	ands	r2, r3
 8001314:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	019b      	lsls	r3, r3, #6
 800131a:	22ff      	movs	r2, #255	; 0xff
 800131c:	401a      	ands	r2, r3
 800131e:	1dfb      	adds	r3, r7, #7
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	0018      	movs	r0, r3
 8001324:	2303      	movs	r3, #3
 8001326:	4003      	ands	r3, r0
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800132c:	481f      	ldr	r0, [pc, #124]	; (80013ac <__NVIC_SetPriority+0xd4>)
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	430a      	orrs	r2, r1
 8001338:	33c0      	adds	r3, #192	; 0xc0
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800133e:	e031      	b.n	80013a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001340:	4a1b      	ldr	r2, [pc, #108]	; (80013b0 <__NVIC_SetPriority+0xd8>)
 8001342:	1dfb      	adds	r3, r7, #7
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	0019      	movs	r1, r3
 8001348:	230f      	movs	r3, #15
 800134a:	400b      	ands	r3, r1
 800134c:	3b08      	subs	r3, #8
 800134e:	089b      	lsrs	r3, r3, #2
 8001350:	3306      	adds	r3, #6
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	18d3      	adds	r3, r2, r3
 8001356:	3304      	adds	r3, #4
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	1dfa      	adds	r2, r7, #7
 800135c:	7812      	ldrb	r2, [r2, #0]
 800135e:	0011      	movs	r1, r2
 8001360:	2203      	movs	r2, #3
 8001362:	400a      	ands	r2, r1
 8001364:	00d2      	lsls	r2, r2, #3
 8001366:	21ff      	movs	r1, #255	; 0xff
 8001368:	4091      	lsls	r1, r2
 800136a:	000a      	movs	r2, r1
 800136c:	43d2      	mvns	r2, r2
 800136e:	401a      	ands	r2, r3
 8001370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	019b      	lsls	r3, r3, #6
 8001376:	22ff      	movs	r2, #255	; 0xff
 8001378:	401a      	ands	r2, r3
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	2303      	movs	r3, #3
 8001382:	4003      	ands	r3, r0
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001388:	4809      	ldr	r0, [pc, #36]	; (80013b0 <__NVIC_SetPriority+0xd8>)
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	001c      	movs	r4, r3
 8001390:	230f      	movs	r3, #15
 8001392:	4023      	ands	r3, r4
 8001394:	3b08      	subs	r3, #8
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	430a      	orrs	r2, r1
 800139a:	3306      	adds	r3, #6
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	18c3      	adds	r3, r0, r3
 80013a0:	3304      	adds	r3, #4
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b003      	add	sp, #12
 80013aa:	bd90      	pop	{r4, r7, pc}
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	045b      	lsls	r3, r3, #17
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d301      	bcc.n	80013cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c8:	2301      	movs	r3, #1
 80013ca:	e010      	b.n	80013ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013cc:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <SysTick_Config+0x44>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	3a01      	subs	r2, #1
 80013d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d4:	2301      	movs	r3, #1
 80013d6:	425b      	negs	r3, r3
 80013d8:	2103      	movs	r1, #3
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff ff7c 	bl	80012d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x44>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x44>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	210f      	movs	r1, #15
 8001408:	187b      	adds	r3, r7, r1
 800140a:	1c02      	adds	r2, r0, #0
 800140c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	187b      	adds	r3, r7, r1
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b25b      	sxtb	r3, r3
 8001416:	0011      	movs	r1, r2
 8001418:	0018      	movs	r0, r3
 800141a:	f7ff ff5d 	bl	80012d8 <__NVIC_SetPriority>
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b004      	add	sp, #16
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	0002      	movs	r2, r0
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b25b      	sxtb	r3, r3
 8001438:	0018      	movs	r0, r3
 800143a:	f7ff ff33 	bl	80012a4 <__NVIC_EnableIRQ>
}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	b002      	add	sp, #8
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff ffaf 	bl	80013b4 <SysTick_Config>
 8001456:	0003      	movs	r3, r0
}
 8001458:	0018      	movs	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	b002      	add	sp, #8
 800145e:	bd80      	pop	{r7, pc}

08001460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001460:	b580      	push	{r7, lr}
 8001462:	b084      	sub	sp, #16
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e036      	b.n	80014e4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2221      	movs	r2, #33	; 0x21
 800147a:	2102      	movs	r1, #2
 800147c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4a18      	ldr	r2, [pc, #96]	; (80014ec <HAL_DMA_Init+0x8c>)
 800148a:	4013      	ands	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001496:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 f932 	bl	8001730 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2221      	movs	r2, #33	; 0x21
 80014d6:	2101      	movs	r1, #1
 80014d8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2220      	movs	r2, #32
 80014de:	2100      	movs	r1, #0
 80014e0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}  
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	ffffc00f 	.word	0xffffc00f

080014f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2221      	movs	r2, #33	; 0x21
 80014fc:	5c9b      	ldrb	r3, [r3, r2]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d008      	beq.n	8001516 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2204      	movs	r2, #4
 8001508:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2220      	movs	r2, #32
 800150e:	2100      	movs	r1, #0
 8001510:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e020      	b.n	8001558 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	210e      	movs	r1, #14
 8001522:	438a      	bics	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2101      	movs	r1, #1
 8001532:	438a      	bics	r2, r1
 8001534:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800153e:	2101      	movs	r1, #1
 8001540:	4091      	lsls	r1, r2
 8001542:	000a      	movs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2221      	movs	r2, #33	; 0x21
 800154a:	2101      	movs	r1, #1
 800154c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2220      	movs	r2, #32
 8001552:	2100      	movs	r1, #0
 8001554:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001568:	210f      	movs	r1, #15
 800156a:	187b      	adds	r3, r7, r1
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2221      	movs	r2, #33	; 0x21
 8001574:	5c9b      	ldrb	r3, [r3, r2]
 8001576:	b2db      	uxtb	r3, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d006      	beq.n	800158a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2204      	movs	r2, #4
 8001580:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2201      	movs	r2, #1
 8001586:	701a      	strb	r2, [r3, #0]
 8001588:	e028      	b.n	80015dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	210e      	movs	r1, #14
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	438a      	bics	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b2:	2101      	movs	r1, #1
 80015b4:	4091      	lsls	r1, r2
 80015b6:	000a      	movs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2221      	movs	r2, #33	; 0x21
 80015be:	2101      	movs	r1, #1
 80015c0:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2220      	movs	r2, #32
 80015c6:	2100      	movs	r1, #0
 80015c8:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d004      	beq.n	80015dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	0010      	movs	r0, r2
 80015da:	4798      	blx	r3
    } 
  }
  return status;
 80015dc:	230f      	movs	r3, #15
 80015de:	18fb      	adds	r3, r7, r3
 80015e0:	781b      	ldrb	r3, [r3, #0]
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2204      	movs	r2, #4
 8001608:	409a      	lsls	r2, r3
 800160a:	0013      	movs	r3, r2
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	4013      	ands	r3, r2
 8001610:	d024      	beq.n	800165c <HAL_DMA_IRQHandler+0x72>
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2204      	movs	r2, #4
 8001616:	4013      	ands	r3, r2
 8001618:	d020      	beq.n	800165c <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2220      	movs	r2, #32
 8001622:	4013      	ands	r3, r2
 8001624:	d107      	bne.n	8001636 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2104      	movs	r1, #4
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2104      	movs	r1, #4
 8001640:	4091      	lsls	r1, r2
 8001642:	000a      	movs	r2, r1
 8001644:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164a:	2b00      	cmp	r3, #0
 800164c:	d100      	bne.n	8001650 <HAL_DMA_IRQHandler+0x66>
 800164e:	e06a      	b.n	8001726 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	0010      	movs	r0, r2
 8001658:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 800165a:	e064      	b.n	8001726 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	2202      	movs	r2, #2
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	d02b      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xda>
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d027      	beq.n	80016c4 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2220      	movs	r2, #32
 800167c:	4013      	ands	r3, r2
 800167e:	d10b      	bne.n	8001698 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	210a      	movs	r1, #10
 800168c:	438a      	bics	r2, r1
 800168e:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2221      	movs	r2, #33	; 0x21
 8001694:	2101      	movs	r1, #1
 8001696:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a0:	2102      	movs	r1, #2
 80016a2:	4091      	lsls	r1, r2
 80016a4:	000a      	movs	r2, r1
 80016a6:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2220      	movs	r2, #32
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d036      	beq.n	8001726 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	0010      	movs	r0, r2
 80016c0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80016c2:	e030      	b.n	8001726 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2208      	movs	r2, #8
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4013      	ands	r3, r2
 80016d2:	d028      	beq.n	8001726 <HAL_DMA_IRQHandler+0x13c>
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	2208      	movs	r2, #8
 80016d8:	4013      	ands	r3, r2
 80016da:	d024      	beq.n	8001726 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	210e      	movs	r1, #14
 80016e8:	438a      	bics	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	2101      	movs	r1, #1
 80016f6:	4091      	lsls	r1, r2
 80016f8:	000a      	movs	r2, r1
 80016fa:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2221      	movs	r2, #33	; 0x21
 8001706:	2101      	movs	r1, #1
 8001708:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	2100      	movs	r1, #0
 8001710:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	0010      	movs	r0, r2
 8001722:	4798      	blx	r3
    }
   }
}  
 8001724:	e7ff      	b.n	8001726 <HAL_DMA_IRQHandler+0x13c>
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b004      	add	sp, #16
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a08      	ldr	r2, [pc, #32]	; (8001760 <DMA_CalcBaseAndBitshift+0x30>)
 800173e:	4694      	mov	ip, r2
 8001740:	4463      	add	r3, ip
 8001742:	2114      	movs	r1, #20
 8001744:	0018      	movs	r0, r3
 8001746:	f7fe fcf1 	bl	800012c <__udivsi3>
 800174a:	0003      	movs	r3, r0
 800174c:	009a      	lsls	r2, r3, #2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a03      	ldr	r2, [pc, #12]	; (8001764 <DMA_CalcBaseAndBitshift+0x34>)
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001758:	46c0      	nop			; (mov r8, r8)
 800175a:	46bd      	mov	sp, r7
 800175c:	b002      	add	sp, #8
 800175e:	bd80      	pop	{r7, pc}
 8001760:	bffdfff8 	.word	0xbffdfff8
 8001764:	40020000 	.word	0x40020000

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e155      	b.n	8001a24 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2101      	movs	r1, #1
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	4091      	lsls	r1, r2
 8001782:	000a      	movs	r2, r1
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d100      	bne.n	8001790 <HAL_GPIO_Init+0x28>
 800178e:	e146      	b.n	8001a1e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2203      	movs	r2, #3
 8001796:	4013      	ands	r3, r2
 8001798:	2b01      	cmp	r3, #1
 800179a:	d005      	beq.n	80017a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2203      	movs	r2, #3
 80017a2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d130      	bne.n	800180a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	409a      	lsls	r2, r3
 80017b6:	0013      	movs	r3, r2
 80017b8:	43da      	mvns	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	409a      	lsls	r2, r3
 80017ca:	0013      	movs	r3, r2
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017de:	2201      	movs	r2, #1
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	2201      	movs	r2, #1
 80017f6:	401a      	ands	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	409a      	lsls	r2, r3
 80017fc:	0013      	movs	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2203      	movs	r2, #3
 8001810:	4013      	ands	r3, r2
 8001812:	2b03      	cmp	r3, #3
 8001814:	d017      	beq.n	8001846 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	2203      	movs	r2, #3
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	43da      	mvns	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	409a      	lsls	r2, r3
 8001838:	0013      	movs	r3, r2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2203      	movs	r2, #3
 800184c:	4013      	ands	r3, r2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d123      	bne.n	800189a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	58d3      	ldr	r3, [r2, r3]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	2207      	movs	r2, #7
 8001864:	4013      	ands	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691a      	ldr	r2, [r3, #16]
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2107      	movs	r1, #7
 800187e:	400b      	ands	r3, r1
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	08da      	lsrs	r2, r3, #3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3208      	adds	r2, #8
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	6939      	ldr	r1, [r7, #16]
 8001898:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2203      	movs	r2, #3
 80018a6:	409a      	lsls	r2, r3
 80018a8:	0013      	movs	r3, r2
 80018aa:	43da      	mvns	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	23c0      	movs	r3, #192	; 0xc0
 80018d4:	029b      	lsls	r3, r3, #10
 80018d6:	4013      	ands	r3, r2
 80018d8:	d100      	bne.n	80018dc <HAL_GPIO_Init+0x174>
 80018da:	e0a0      	b.n	8001a1e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018dc:	4b57      	ldr	r3, [pc, #348]	; (8001a3c <HAL_GPIO_Init+0x2d4>)
 80018de:	699a      	ldr	r2, [r3, #24]
 80018e0:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_GPIO_Init+0x2d4>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	619a      	str	r2, [r3, #24]
 80018e8:	4b54      	ldr	r3, [pc, #336]	; (8001a3c <HAL_GPIO_Init+0x2d4>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018f4:	4a52      	ldr	r2, [pc, #328]	; (8001a40 <HAL_GPIO_Init+0x2d8>)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	589b      	ldr	r3, [r3, r2]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2203      	movs	r2, #3
 8001906:	4013      	ands	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	43da      	mvns	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	2390      	movs	r3, #144	; 0x90
 800191c:	05db      	lsls	r3, r3, #23
 800191e:	429a      	cmp	r2, r3
 8001920:	d019      	beq.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a47      	ldr	r2, [pc, #284]	; (8001a44 <HAL_GPIO_Init+0x2dc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_GPIO_Init+0x1ea>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a46      	ldr	r2, [pc, #280]	; (8001a48 <HAL_GPIO_Init+0x2e0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00d      	beq.n	800194e <HAL_GPIO_Init+0x1e6>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a45      	ldr	r2, [pc, #276]	; (8001a4c <HAL_GPIO_Init+0x2e4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d007      	beq.n	800194a <HAL_GPIO_Init+0x1e2>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a44      	ldr	r2, [pc, #272]	; (8001a50 <HAL_GPIO_Init+0x2e8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d101      	bne.n	8001946 <HAL_GPIO_Init+0x1de>
 8001942:	2304      	movs	r3, #4
 8001944:	e008      	b.n	8001958 <HAL_GPIO_Init+0x1f0>
 8001946:	2305      	movs	r3, #5
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x1f0>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <HAL_GPIO_Init+0x1f0>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <HAL_GPIO_Init+0x1f0>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x1f0>
 8001956:	2300      	movs	r3, #0
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	2103      	movs	r1, #3
 800195c:	400a      	ands	r2, r1
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4093      	lsls	r3, r2
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001968:	4935      	ldr	r1, [pc, #212]	; (8001a40 <HAL_GPIO_Init+0x2d8>)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001976:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	025b      	lsls	r3, r3, #9
 800198e:	4013      	ands	r3, r2
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80019a0:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	43da      	mvns	r2, r3
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	029b      	lsls	r3, r3, #10
 80019b8:	4013      	ands	r3, r2
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019c4:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43da      	mvns	r2, r3
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	035b      	lsls	r3, r3, #13
 80019e2:	4013      	ands	r3, r2
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019ee:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019f4:	4b17      	ldr	r3, [pc, #92]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	43da      	mvns	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4013      	ands	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	039b      	lsls	r3, r3, #14
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <HAL_GPIO_Init+0x2ec>)
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3301      	adds	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	40da      	lsrs	r2, r3
 8001a2c:	1e13      	subs	r3, r2, #0
 8001a2e:	d000      	beq.n	8001a32 <HAL_GPIO_Init+0x2ca>
 8001a30:	e6a2      	b.n	8001778 <HAL_GPIO_Init+0x10>
  } 
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	b006      	add	sp, #24
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00
 8001a50:	48001000 	.word	0x48001000
 8001a54:	40010400 	.word	0x40010400

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	0008      	movs	r0, r1
 8001a62:	0011      	movs	r1, r2
 8001a64:	1cbb      	adds	r3, r7, #2
 8001a66:	1c02      	adds	r2, r0, #0
 8001a68:	801a      	strh	r2, [r3, #0]
 8001a6a:	1c7b      	adds	r3, r7, #1
 8001a6c:	1c0a      	adds	r2, r1, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a70:	1c7b      	adds	r3, r7, #1
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a78:	1cbb      	adds	r3, r7, #2
 8001a7a:	881a      	ldrh	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a82:	1cbb      	adds	r3, r7, #2
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b002      	add	sp, #8
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e082      	b.n	8001bac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2241      	movs	r2, #65	; 0x41
 8001aaa:	5c9b      	ldrb	r3, [r3, r2]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2240      	movs	r2, #64	; 0x40
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	0018      	movs	r0, r3
 8001abe:	f7ff f881 	bl	8000bc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2241      	movs	r2, #65	; 0x41
 8001ac6:	2124      	movs	r1, #36	; 0x24
 8001ac8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	438a      	bics	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685a      	ldr	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4934      	ldr	r1, [pc, #208]	; (8001bb4 <HAL_I2C_Init+0x120>)
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4931      	ldr	r1, [pc, #196]	; (8001bb8 <HAL_I2C_Init+0x124>)
 8001af4:	400a      	ands	r2, r1
 8001af6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d108      	bne.n	8001b12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0209      	lsls	r1, r1, #8
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e007      	b.n	8001b22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2184      	movs	r1, #132	; 0x84
 8001b1c:	0209      	lsls	r1, r1, #8
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d104      	bne.n	8001b34 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2280      	movs	r2, #128	; 0x80
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	491f      	ldr	r1, [pc, #124]	; (8001bbc <HAL_I2C_Init+0x128>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	491a      	ldr	r1, [pc, #104]	; (8001bb8 <HAL_I2C_Init+0x124>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69d9      	ldr	r1, [r3, #28]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1a      	ldr	r2, [r3, #32]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2241      	movs	r2, #65	; 0x41
 8001b98:	2120      	movs	r1, #32
 8001b9a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2242      	movs	r2, #66	; 0x42
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	f0ffffff 	.word	0xf0ffffff
 8001bb8:	ffff7fff 	.word	0xffff7fff
 8001bbc:	02008000 	.word	0x02008000

08001bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2241      	movs	r2, #65	; 0x41
 8001bce:	5c9b      	ldrb	r3, [r3, r2]
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	d138      	bne.n	8001c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2240      	movs	r2, #64	; 0x40
 8001bda:	5c9b      	ldrb	r3, [r3, r2]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d101      	bne.n	8001be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e032      	b.n	8001c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2240      	movs	r2, #64	; 0x40
 8001be8:	2101      	movs	r1, #1
 8001bea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2241      	movs	r2, #65	; 0x41
 8001bf0:	2124      	movs	r1, #36	; 0x24
 8001bf2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2101      	movs	r1, #1
 8001c00:	438a      	bics	r2, r1
 8001c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4911      	ldr	r1, [pc, #68]	; (8001c54 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6819      	ldr	r1, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	430a      	orrs	r2, r1
 8001c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2241      	movs	r2, #65	; 0x41
 8001c38:	2120      	movs	r1, #32
 8001c3a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2240      	movs	r2, #64	; 0x40
 8001c40:	2100      	movs	r1, #0
 8001c42:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	ffffefff 	.word	0xffffefff

08001c58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2241      	movs	r2, #65	; 0x41
 8001c66:	5c9b      	ldrb	r3, [r3, r2]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b20      	cmp	r3, #32
 8001c6c:	d139      	bne.n	8001ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2240      	movs	r2, #64	; 0x40
 8001c72:	5c9b      	ldrb	r3, [r3, r2]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e033      	b.n	8001ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2240      	movs	r2, #64	; 0x40
 8001c80:	2101      	movs	r1, #1
 8001c82:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2241      	movs	r2, #65	; 0x41
 8001c88:	2124      	movs	r1, #36	; 0x24
 8001c8a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2101      	movs	r1, #1
 8001c98:	438a      	bics	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4a11      	ldr	r2, [pc, #68]	; (8001cec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2101      	movs	r1, #1
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2241      	movs	r2, #65	; 0x41
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e000      	b.n	8001ce4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ce2:	2302      	movs	r3, #2
  }
}
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	b004      	add	sp, #16
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	fffff0ff 	.word	0xfffff0ff

08001cf0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
 8001cf4:	af06      	add	r7, sp, #24
 8001cf6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0ff      	b.n	8001f02 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a81      	ldr	r2, [pc, #516]	; (8001f0c <HAL_PCD_Init+0x21c>)
 8001d06:	5c9b      	ldrb	r3, [r3, r2]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	23aa      	movs	r3, #170	; 0xaa
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	2100      	movs	r1, #0
 8001d16:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	f7ff f97e 	bl	800101c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a7a      	ldr	r2, [pc, #488]	; (8001f0c <HAL_PCD_Init+0x21c>)
 8001d24:	2103      	movs	r1, #3
 8001d26:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f002 f993 	bl	8004058 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d32:	230f      	movs	r3, #15
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e058      	b.n	8001dee <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d3c:	200f      	movs	r0, #15
 8001d3e:	183b      	adds	r3, r7, r0
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	0013      	movs	r3, r2
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	189b      	adds	r3, r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	18cb      	adds	r3, r1, r3
 8001d50:	3301      	adds	r3, #1
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d56:	183b      	adds	r3, r7, r0
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	0013      	movs	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	189b      	adds	r3, r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	183a      	adds	r2, r7, r0
 8001d68:	7812      	ldrb	r2, [r2, #0]
 8001d6a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d6c:	0004      	movs	r4, r0
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	b298      	uxth	r0, r3
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	18cb      	adds	r3, r1, r3
 8001d84:	3336      	adds	r3, #54	; 0x36
 8001d86:	1c02      	adds	r2, r0, #0
 8001d88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d8a:	193b      	adds	r3, r7, r4
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	0013      	movs	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	189b      	adds	r3, r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	18cb      	adds	r3, r1, r3
 8001d9c:	3303      	adds	r3, #3
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	781a      	ldrb	r2, [r3, #0]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	0013      	movs	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	189b      	adds	r3, r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	18cb      	adds	r3, r1, r3
 8001db2:	3338      	adds	r3, #56	; 0x38
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	781a      	ldrb	r2, [r3, #0]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	0013      	movs	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	189b      	adds	r3, r3, r2
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	18cb      	adds	r3, r1, r3
 8001dc8:	333c      	adds	r3, #60	; 0x3c
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	0013      	movs	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	189b      	adds	r3, r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	18cb      	adds	r3, r1, r3
 8001dde:	3340      	adds	r3, #64	; 0x40
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	781a      	ldrb	r2, [r3, #0]
 8001de8:	193b      	adds	r3, r7, r4
 8001dea:	3201      	adds	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	210f      	movs	r1, #15
 8001df0:	187b      	adds	r3, r7, r1
 8001df2:	781a      	ldrb	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d39f      	bcc.n	8001d3c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	187b      	adds	r3, r7, r1
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	e056      	b.n	8001eb2 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e04:	240f      	movs	r4, #15
 8001e06:	193b      	adds	r3, r7, r4
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	236a      	movs	r3, #106	; 0x6a
 8001e0e:	33ff      	adds	r3, #255	; 0xff
 8001e10:	0019      	movs	r1, r3
 8001e12:	0013      	movs	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	189b      	adds	r3, r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	18c3      	adds	r3, r0, r3
 8001e1c:	185b      	adds	r3, r3, r1
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e22:	193b      	adds	r3, r7, r4
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	23b4      	movs	r3, #180	; 0xb4
 8001e2a:	0059      	lsls	r1, r3, #1
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	189b      	adds	r3, r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	18c3      	adds	r3, r0, r3
 8001e36:	185b      	adds	r3, r3, r1
 8001e38:	193a      	adds	r2, r7, r4
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	781a      	ldrb	r2, [r3, #0]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	236c      	movs	r3, #108	; 0x6c
 8001e46:	33ff      	adds	r3, #255	; 0xff
 8001e48:	0019      	movs	r1, r3
 8001e4a:	0013      	movs	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	189b      	adds	r3, r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	18c3      	adds	r3, r0, r3
 8001e54:	185b      	adds	r3, r3, r1
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e5a:	193b      	adds	r3, r7, r4
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	23bc      	movs	r3, #188	; 0xbc
 8001e62:	0059      	lsls	r1, r3, #1
 8001e64:	0013      	movs	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	189b      	adds	r3, r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	18c3      	adds	r3, r0, r3
 8001e6e:	185b      	adds	r3, r3, r1
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e74:	193b      	adds	r3, r7, r4
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	23be      	movs	r3, #190	; 0xbe
 8001e7c:	0059      	lsls	r1, r3, #1
 8001e7e:	0013      	movs	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	189b      	adds	r3, r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	18c3      	adds	r3, r0, r3
 8001e88:	185b      	adds	r3, r3, r1
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	23c0      	movs	r3, #192	; 0xc0
 8001e96:	0059      	lsls	r1, r3, #1
 8001e98:	0013      	movs	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	189b      	adds	r3, r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	18c3      	adds	r3, r0, r3
 8001ea2:	185b      	adds	r3, r3, r1
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	781a      	ldrb	r2, [r3, #0]
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	3201      	adds	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
 8001eb2:	230f      	movs	r3, #15
 8001eb4:	18fb      	adds	r3, r7, r3
 8001eb6:	781a      	ldrb	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d3a1      	bcc.n	8001e04 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	466a      	mov	r2, sp
 8001ec8:	0011      	movs	r1, r2
 8001eca:	001a      	movs	r2, r3
 8001ecc:	3210      	adds	r2, #16
 8001ece:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001ed0:	c170      	stmia	r1!, {r4, r5, r6}
 8001ed2:	ca30      	ldmia	r2!, {r4, r5}
 8001ed4:	c130      	stmia	r1!, {r4, r5}
 8001ed6:	6859      	ldr	r1, [r3, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f002 f8d6 	bl	800408c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	; 0x24
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_PCD_Init+0x21c>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d103      	bne.n	8001f00 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 f808 	bl	8001f10 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b005      	add	sp, #20
 8001f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0a:	46c0      	nop			; (mov r8, r8)
 8001f0c:	000002a9 	.word	0x000002a9

08001f10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	23ba      	movs	r3, #186	; 0xba
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	2101      	movs	r1, #1
 8001f26:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	23b8      	movs	r3, #184	; 0xb8
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	2100      	movs	r1, #0
 8001f30:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2254      	movs	r2, #84	; 0x54
 8001f36:	5a9b      	ldrh	r3, [r3, r2]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b299      	uxth	r1, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2254      	movs	r2, #84	; 0x54
 8001f44:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2254      	movs	r2, #84	; 0x54
 8001f4a:	5a9b      	ldrh	r3, [r3, r2]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b299      	uxth	r1, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2254      	movs	r2, #84	; 0x54
 8001f58:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b088      	sub	sp, #32
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f000 fb76 	bl	8002664 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d100      	bne.n	8001f84 <HAL_RCC_OscConfig+0x20>
 8001f82:	e08e      	b.n	80020a2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f84:	4bc5      	ldr	r3, [pc, #788]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	220c      	movs	r2, #12
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	d00e      	beq.n	8001fae <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f90:	4bc2      	ldr	r3, [pc, #776]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	220c      	movs	r2, #12
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d117      	bne.n	8001fcc <HAL_RCC_OscConfig+0x68>
 8001f9c:	4bbf      	ldr	r3, [pc, #764]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	23c0      	movs	r3, #192	; 0xc0
 8001fa2:	025b      	lsls	r3, r3, #9
 8001fa4:	401a      	ands	r2, r3
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d10e      	bne.n	8001fcc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4bbb      	ldr	r3, [pc, #748]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	2380      	movs	r3, #128	; 0x80
 8001fb4:	029b      	lsls	r3, r3, #10
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d100      	bne.n	8001fbc <HAL_RCC_OscConfig+0x58>
 8001fba:	e071      	b.n	80020a0 <HAL_RCC_OscConfig+0x13c>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d000      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x62>
 8001fc4:	e06c      	b.n	80020a0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f000 fb4c 	bl	8002664 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x80>
 8001fd4:	4bb1      	ldr	r3, [pc, #708]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4bb0      	ldr	r3, [pc, #704]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e02f      	b.n	8002044 <HAL_RCC_OscConfig+0xe0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0xa2>
 8001fec:	4bab      	ldr	r3, [pc, #684]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4baa      	ldr	r3, [pc, #680]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001ff2:	49ab      	ldr	r1, [pc, #684]	; (80022a0 <HAL_RCC_OscConfig+0x33c>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	4ba8      	ldr	r3, [pc, #672]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4ba7      	ldr	r3, [pc, #668]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8001ffe:	49a9      	ldr	r1, [pc, #676]	; (80022a4 <HAL_RCC_OscConfig+0x340>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e01e      	b.n	8002044 <HAL_RCC_OscConfig+0xe0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10e      	bne.n	800202c <HAL_RCC_OscConfig+0xc8>
 800200e:	4ba3      	ldr	r3, [pc, #652]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4ba2      	ldr	r3, [pc, #648]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	02c9      	lsls	r1, r1, #11
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	4b9f      	ldr	r3, [pc, #636]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b9e      	ldr	r3, [pc, #632]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	0249      	lsls	r1, r1, #9
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xe0>
 800202c:	4b9b      	ldr	r3, [pc, #620]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b9a      	ldr	r3, [pc, #616]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002032:	499b      	ldr	r1, [pc, #620]	; (80022a0 <HAL_RCC_OscConfig+0x33c>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b98      	ldr	r3, [pc, #608]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b97      	ldr	r3, [pc, #604]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800203e:	4999      	ldr	r1, [pc, #612]	; (80022a4 <HAL_RCC_OscConfig+0x340>)
 8002040:	400a      	ands	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f8fc 	bl	8001248 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002056:	f7ff f8f7 	bl	8001248 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	; 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e2fd      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002068:	4b8c      	ldr	r3, [pc, #560]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0xf2>
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7ff f8e7 	bl	8001248 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f8e2 	bl	8001248 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e2e8      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b82      	ldr	r3, [pc, #520]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	4013      	ands	r3, r2
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x11c>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d100      	bne.n	80020ae <HAL_RCC_OscConfig+0x14a>
 80020ac:	e06c      	b.n	8002188 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020ae:	4b7b      	ldr	r3, [pc, #492]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	220c      	movs	r2, #12
 80020b4:	4013      	ands	r3, r2
 80020b6:	d00e      	beq.n	80020d6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020b8:	4b78      	ldr	r3, [pc, #480]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	220c      	movs	r2, #12
 80020be:	4013      	ands	r3, r2
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11f      	bne.n	8002104 <HAL_RCC_OscConfig+0x1a0>
 80020c4:	4b75      	ldr	r3, [pc, #468]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	401a      	ands	r2, r3
 80020ce:	2380      	movs	r3, #128	; 0x80
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d116      	bne.n	8002104 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x188>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e2bb      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ec:	4b6b      	ldr	r3, [pc, #428]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	22f8      	movs	r2, #248	; 0xf8
 80020f2:	4393      	bics	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00da      	lsls	r2, r3, #3
 80020fc:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002102:	e041      	b.n	8002188 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d024      	beq.n	8002156 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800210c:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	4b62      	ldr	r3, [pc, #392]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002112:	2101      	movs	r1, #1
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002118:	f7ff f896 	bl	8001248 <HAL_GetTick>
 800211c:	0003      	movs	r3, r0
 800211e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002122:	f7ff f891 	bl	8001248 <HAL_GetTick>
 8002126:	0002      	movs	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b02      	cmp	r3, #2
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e297      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002134:	4b59      	ldr	r3, [pc, #356]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2202      	movs	r2, #2
 800213a:	4013      	ands	r3, r2
 800213c:	d0f1      	beq.n	8002122 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b57      	ldr	r3, [pc, #348]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	22f8      	movs	r2, #248	; 0xf8
 8002144:	4393      	bics	r3, r2
 8002146:	0019      	movs	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	00da      	lsls	r2, r3, #3
 800214e:	4b53      	ldr	r3, [pc, #332]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002150:	430a      	orrs	r2, r1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e018      	b.n	8002188 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002156:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	4b50      	ldr	r3, [pc, #320]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800215c:	2101      	movs	r1, #1
 800215e:	438a      	bics	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff f871 	bl	8001248 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800216c:	f7ff f86c 	bl	8001248 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e272      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d1f1      	bne.n	800216c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2208      	movs	r2, #8
 800218e:	4013      	ands	r3, r2
 8002190:	d036      	beq.n	8002200 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d019      	beq.n	80021ce <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219a:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800219c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800219e:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a6:	f7ff f84f 	bl	8001248 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b0:	f7ff f84a 	bl	8001248 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e250      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	2202      	movs	r2, #2
 80021c8:	4013      	ands	r3, r2
 80021ca:	d0f1      	beq.n	80021b0 <HAL_RCC_OscConfig+0x24c>
 80021cc:	e018      	b.n	8002200 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ce:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80021d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	438a      	bics	r2, r1
 80021d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7ff f835 	bl	8001248 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021e4:	f7ff f830 	bl	8001248 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e236      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <HAL_RCC_OscConfig+0x338>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	2202      	movs	r2, #2
 80021fc:	4013      	ands	r3, r2
 80021fe:	d1f1      	bne.n	80021e4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2204      	movs	r2, #4
 8002206:	4013      	ands	r3, r2
 8002208:	d100      	bne.n	800220c <HAL_RCC_OscConfig+0x2a8>
 800220a:	e0b5      	b.n	8002378 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220c:	201f      	movs	r0, #31
 800220e:	183b      	adds	r3, r7, r0
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4013      	ands	r3, r2
 800221e:	d110      	bne.n	8002242 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002222:	69da      	ldr	r2, [r3, #28]
 8002224:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	0549      	lsls	r1, r1, #21
 800222a:	430a      	orrs	r2, r1
 800222c:	61da      	str	r2, [r3, #28]
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	2380      	movs	r3, #128	; 0x80
 8002234:	055b      	lsls	r3, r3, #21
 8002236:	4013      	ands	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800223c:	183b      	adds	r3, r7, r0
 800223e:	2201      	movs	r2, #1
 8002240:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002242:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x344>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4013      	ands	r3, r2
 800224c:	d11a      	bne.n	8002284 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800224e:	4b16      	ldr	r3, [pc, #88]	; (80022a8 <HAL_RCC_OscConfig+0x344>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_RCC_OscConfig+0x344>)
 8002254:	2180      	movs	r1, #128	; 0x80
 8002256:	0049      	lsls	r1, r1, #1
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225c:	f7fe fff4 	bl	8001248 <HAL_GetTick>
 8002260:	0003      	movs	r3, r0
 8002262:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe ffef 	bl	8001248 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e1f5      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_OscConfig+0x344>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4013      	ands	r3, r2
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d10f      	bne.n	80022ac <HAL_RCC_OscConfig+0x348>
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_RCC_OscConfig+0x338>)
 800228e:	6a1a      	ldr	r2, [r3, #32]
 8002290:	4b02      	ldr	r3, [pc, #8]	; (800229c <HAL_RCC_OscConfig+0x338>)
 8002292:	2101      	movs	r1, #1
 8002294:	430a      	orrs	r2, r1
 8002296:	621a      	str	r2, [r3, #32]
 8002298:	e036      	b.n	8002308 <HAL_RCC_OscConfig+0x3a4>
 800229a:	46c0      	nop			; (mov r8, r8)
 800229c:	40021000 	.word	0x40021000
 80022a0:	fffeffff 	.word	0xfffeffff
 80022a4:	fffbffff 	.word	0xfffbffff
 80022a8:	40007000 	.word	0x40007000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x36a>
 80022b4:	4bca      	ldr	r3, [pc, #808]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	4bc9      	ldr	r3, [pc, #804]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	621a      	str	r2, [r3, #32]
 80022c0:	4bc7      	ldr	r3, [pc, #796]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	4bc6      	ldr	r3, [pc, #792]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022c6:	2104      	movs	r1, #4
 80022c8:	438a      	bics	r2, r1
 80022ca:	621a      	str	r2, [r3, #32]
 80022cc:	e01c      	b.n	8002308 <HAL_RCC_OscConfig+0x3a4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x38c>
 80022d6:	4bc2      	ldr	r3, [pc, #776]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022d8:	6a1a      	ldr	r2, [r3, #32]
 80022da:	4bc1      	ldr	r3, [pc, #772]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022dc:	2104      	movs	r1, #4
 80022de:	430a      	orrs	r2, r1
 80022e0:	621a      	str	r2, [r3, #32]
 80022e2:	4bbf      	ldr	r3, [pc, #764]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	4bbe      	ldr	r3, [pc, #760]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	430a      	orrs	r2, r1
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0x3a4>
 80022f0:	4bbb      	ldr	r3, [pc, #748]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022f2:	6a1a      	ldr	r2, [r3, #32]
 80022f4:	4bba      	ldr	r3, [pc, #744]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	621a      	str	r2, [r3, #32]
 80022fc:	4bb8      	ldr	r3, [pc, #736]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4bb7      	ldr	r3, [pc, #732]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002302:	2104      	movs	r1, #4
 8002304:	438a      	bics	r2, r1
 8002306:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d014      	beq.n	800233a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff9a 	bl	8001248 <HAL_GetTick>
 8002314:	0003      	movs	r3, r0
 8002316:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002318:	e009      	b.n	800232e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe ff95 	bl	8001248 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4aaf      	ldr	r2, [pc, #700]	; (80025e4 <HAL_RCC_OscConfig+0x680>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e19a      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4bac      	ldr	r3, [pc, #688]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	2202      	movs	r2, #2
 8002334:	4013      	ands	r3, r2
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x3b6>
 8002338:	e013      	b.n	8002362 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233a:	f7fe ff85 	bl	8001248 <HAL_GetTick>
 800233e:	0003      	movs	r3, r0
 8002340:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002342:	e009      	b.n	8002358 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe ff80 	bl	8001248 <HAL_GetTick>
 8002348:	0002      	movs	r2, r0
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	4aa5      	ldr	r2, [pc, #660]	; (80025e4 <HAL_RCC_OscConfig+0x680>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e185      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002358:	4ba1      	ldr	r3, [pc, #644]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b9c      	ldr	r3, [pc, #624]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	4b9b      	ldr	r3, [pc, #620]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002372:	499d      	ldr	r1, [pc, #628]	; (80025e8 <HAL_RCC_OscConfig+0x684>)
 8002374:	400a      	ands	r2, r1
 8002376:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2210      	movs	r2, #16
 800237e:	4013      	ands	r3, r2
 8002380:	d063      	beq.n	800244a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d12a      	bne.n	80023e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800238a:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800238c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800238e:	4b94      	ldr	r3, [pc, #592]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002390:	2104      	movs	r1, #4
 8002392:	430a      	orrs	r2, r1
 8002394:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002396:	4b92      	ldr	r3, [pc, #584]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800239c:	2101      	movs	r1, #1
 800239e:	430a      	orrs	r2, r1
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a2:	f7fe ff51 	bl	8001248 <HAL_GetTick>
 80023a6:	0003      	movs	r3, r0
 80023a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023ac:	f7fe ff4c 	bl	8001248 <HAL_GetTick>
 80023b0:	0002      	movs	r2, r0
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e152      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	d0f1      	beq.n	80023ac <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023c8:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80023ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023cc:	22f8      	movs	r2, #248	; 0xf8
 80023ce:	4393      	bics	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	00da      	lsls	r2, r3, #3
 80023d8:	4b81      	ldr	r3, [pc, #516]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80023da:	430a      	orrs	r2, r1
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
 80023de:	e034      	b.n	800244a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	3305      	adds	r3, #5
 80023e6:	d111      	bne.n	800240c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023e8:	4b7d      	ldr	r3, [pc, #500]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80023ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ec:	4b7c      	ldr	r3, [pc, #496]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80023ee:	2104      	movs	r1, #4
 80023f0:	438a      	bics	r2, r1
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023f4:	4b7a      	ldr	r3, [pc, #488]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f8:	22f8      	movs	r2, #248	; 0xf8
 80023fa:	4393      	bics	r3, r2
 80023fc:	0019      	movs	r1, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	00da      	lsls	r2, r3, #3
 8002404:	4b76      	ldr	r3, [pc, #472]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002406:	430a      	orrs	r2, r1
 8002408:	635a      	str	r2, [r3, #52]	; 0x34
 800240a:	e01e      	b.n	800244a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800240c:	4b74      	ldr	r3, [pc, #464]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800240e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002410:	4b73      	ldr	r3, [pc, #460]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002412:	2104      	movs	r1, #4
 8002414:	430a      	orrs	r2, r1
 8002416:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002418:	4b71      	ldr	r3, [pc, #452]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800241a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241c:	4b70      	ldr	r3, [pc, #448]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800241e:	2101      	movs	r1, #1
 8002420:	438a      	bics	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002424:	f7fe ff10 	bl	8001248 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800242e:	f7fe ff0b 	bl	8001248 <HAL_GetTick>
 8002432:	0002      	movs	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e111      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002440:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002444:	2202      	movs	r2, #2
 8002446:	4013      	ands	r3, r2
 8002448:	d1f1      	bne.n	800242e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2220      	movs	r2, #32
 8002450:	4013      	ands	r3, r2
 8002452:	d05c      	beq.n	800250e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002454:	4b62      	ldr	r3, [pc, #392]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	220c      	movs	r2, #12
 800245a:	4013      	ands	r3, r2
 800245c:	2b0c      	cmp	r3, #12
 800245e:	d00e      	beq.n	800247e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002460:	4b5f      	ldr	r3, [pc, #380]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	220c      	movs	r2, #12
 8002466:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002468:	2b08      	cmp	r3, #8
 800246a:	d114      	bne.n	8002496 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800246c:	4b5c      	ldr	r3, [pc, #368]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	23c0      	movs	r3, #192	; 0xc0
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	401a      	ands	r2, r3
 8002476:	23c0      	movs	r3, #192	; 0xc0
 8002478:	025b      	lsls	r3, r3, #9
 800247a:	429a      	cmp	r2, r3
 800247c:	d10b      	bne.n	8002496 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800247e:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002482:	2380      	movs	r3, #128	; 0x80
 8002484:	025b      	lsls	r3, r3, #9
 8002486:	4013      	ands	r3, r2
 8002488:	d040      	beq.n	800250c <HAL_RCC_OscConfig+0x5a8>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d03c      	beq.n	800250c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0e6      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d01b      	beq.n	80024d6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800249e:	4b50      	ldr	r3, [pc, #320]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80024a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a2:	4b4f      	ldr	r3, [pc, #316]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	0249      	lsls	r1, r1, #9
 80024a8:	430a      	orrs	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe fecc 	bl	8001248 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024b6:	f7fe fec7 	bl	8001248 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e0cd      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80024c8:	4b45      	ldr	r3, [pc, #276]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80024ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	025b      	lsls	r3, r3, #9
 80024d0:	4013      	ands	r3, r2
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x552>
 80024d4:	e01b      	b.n	800250e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80024d6:	4b42      	ldr	r3, [pc, #264]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80024d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024da:	4b41      	ldr	r3, [pc, #260]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80024dc:	4943      	ldr	r1, [pc, #268]	; (80025ec <HAL_RCC_OscConfig+0x688>)
 80024de:	400a      	ands	r2, r1
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7fe feb1 	bl	8001248 <HAL_GetTick>
 80024e6:	0003      	movs	r3, r0
 80024e8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ec:	f7fe feac 	bl	8001248 <HAL_GetTick>
 80024f0:	0002      	movs	r2, r0
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0b2      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80024fe:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002500:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	4013      	ands	r3, r2
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x588>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800250c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b00      	cmp	r3, #0
 8002514:	d100      	bne.n	8002518 <HAL_RCC_OscConfig+0x5b4>
 8002516:	e0a4      	b.n	8002662 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	220c      	movs	r2, #12
 800251e:	4013      	ands	r3, r2
 8002520:	2b08      	cmp	r3, #8
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x5c2>
 8002524:	e078      	b.n	8002618 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b02      	cmp	r3, #2
 800252c:	d14c      	bne.n	80025c8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252e:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4b2b      	ldr	r3, [pc, #172]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002534:	492e      	ldr	r1, [pc, #184]	; (80025f0 <HAL_RCC_OscConfig+0x68c>)
 8002536:	400a      	ands	r2, r1
 8002538:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253a:	f7fe fe85 	bl	8001248 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fe80 	bl	8001248 <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e086      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	049b      	lsls	r3, r3, #18
 800255e:	4013      	ands	r3, r2
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	220f      	movs	r2, #15
 8002568:	4393      	bics	r3, r2
 800256a:	0019      	movs	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002572:	430a      	orrs	r2, r1
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_RCC_OscConfig+0x690>)
 800257c:	4013      	ands	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002588:	431a      	orrs	r2, r3
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 800258c:	430a      	orrs	r2, r1
 800258e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	0449      	lsls	r1, r1, #17
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7fe fe53 	bl	8001248 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fe4e 	bl	8001248 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e054      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	049b      	lsls	r3, r3, #18
 80025c2:	4013      	ands	r3, r2
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x644>
 80025c6:	e04c      	b.n	8002662 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <HAL_RCC_OscConfig+0x67c>)
 80025ce:	4908      	ldr	r1, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x68c>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d4:	f7fe fe38 	bl	8001248 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025dc:	e015      	b.n	800260a <HAL_RCC_OscConfig+0x6a6>
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	40021000 	.word	0x40021000
 80025e4:	00001388 	.word	0x00001388
 80025e8:	efffffff 	.word	0xefffffff
 80025ec:	fffeffff 	.word	0xfffeffff
 80025f0:	feffffff 	.word	0xfeffffff
 80025f4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fe26 	bl	8001248 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e02c      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <HAL_RCC_OscConfig+0x708>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	2380      	movs	r3, #128	; 0x80
 8002610:	049b      	lsls	r3, r3, #18
 8002612:	4013      	ands	r3, r2
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x694>
 8002616:	e024      	b.n	8002662 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e01f      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_RCC_OscConfig+0x708>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x708>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	23c0      	movs	r3, #192	; 0xc0
 8002634:	025b      	lsls	r3, r3, #9
 8002636:	401a      	ands	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	429a      	cmp	r2, r3
 800263e:	d10e      	bne.n	800265e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	220f      	movs	r2, #15
 8002644:	401a      	ands	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	429a      	cmp	r2, r3
 800264c:	d107      	bne.n	800265e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	23f0      	movs	r3, #240	; 0xf0
 8002652:	039b      	lsls	r3, r3, #14
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b008      	add	sp, #32
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000

08002670 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0bf      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002684:	4b61      	ldr	r3, [pc, #388]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	4013      	ands	r3, r2
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	429a      	cmp	r2, r3
 8002690:	d911      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002692:	4b5e      	ldr	r3, [pc, #376]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	4393      	bics	r3, r2
 800269a:	0019      	movs	r1, r3
 800269c:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4013      	ands	r3, r2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d001      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0a6      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	4013      	ands	r3, r2
 80026be:	d015      	beq.n	80026ec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2204      	movs	r2, #4
 80026c6:	4013      	ands	r3, r2
 80026c8:	d006      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026ca:	4b51      	ldr	r3, [pc, #324]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80026cc:	685a      	ldr	r2, [r3, #4]
 80026ce:	4b50      	ldr	r3, [pc, #320]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80026d0:	21e0      	movs	r1, #224	; 0xe0
 80026d2:	00c9      	lsls	r1, r1, #3
 80026d4:	430a      	orrs	r2, r1
 80026d6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b4d      	ldr	r3, [pc, #308]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	22f0      	movs	r2, #240	; 0xf0
 80026de:	4393      	bics	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2201      	movs	r2, #1
 80026f2:	4013      	ands	r3, r2
 80026f4:	d04c      	beq.n	8002790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b44      	ldr	r3, [pc, #272]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	4013      	ands	r3, r2
 8002708:	d120      	bne.n	800274c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e07a      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002716:	4b3e      	ldr	r3, [pc, #248]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	049b      	lsls	r3, r3, #18
 800271e:	4013      	ands	r3, r2
 8002720:	d114      	bne.n	800274c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06e      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800272e:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 8002730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	025b      	lsls	r3, r3, #9
 8002736:	4013      	ands	r3, r2
 8002738:	d108      	bne.n	800274c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e062      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e05b      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800274c:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	4393      	bics	r3, r2
 8002754:	0019      	movs	r1, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4b2d      	ldr	r3, [pc, #180]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 800275c:	430a      	orrs	r2, r1
 800275e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002760:	f7fe fd72 	bl	8001248 <HAL_GetTick>
 8002764:	0003      	movs	r3, r0
 8002766:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002768:	e009      	b.n	800277e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800276a:	f7fe fd6d 	bl	8001248 <HAL_GetTick>
 800276e:	0002      	movs	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	4a27      	ldr	r2, [pc, #156]	; (8002814 <HAL_RCC_ClockConfig+0x1a4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e042      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	220c      	movs	r2, #12
 8002784:	401a      	ands	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	429a      	cmp	r2, r3
 800278e:	d1ec      	bne.n	800276a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002790:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	4013      	ands	r3, r2
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d211      	bcs.n	80027c2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2201      	movs	r2, #1
 80027a4:	4393      	bics	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x19c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d001      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e020      	b.n	8002804 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	d009      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	4a11      	ldr	r2, [pc, #68]	; (8002818 <HAL_RCC_ClockConfig+0x1a8>)
 80027d2:	4013      	ands	r3, r2
 80027d4:	0019      	movs	r1, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80027dc:	430a      	orrs	r2, r1
 80027de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027e0:	f000 f820 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80027e4:	0001      	movs	r1, r0
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1a0>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	220f      	movs	r2, #15
 80027ee:	4013      	ands	r3, r2
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <HAL_RCC_ClockConfig+0x1ac>)
 80027f2:	5cd3      	ldrb	r3, [r2, r3]
 80027f4:	000a      	movs	r2, r1
 80027f6:	40da      	lsrs	r2, r3
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_ClockConfig+0x1b0>)
 80027fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7fe fcdd 	bl	80011bc <HAL_InitTick>
  
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b004      	add	sp, #16
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40022000 	.word	0x40022000
 8002810:	40021000 	.word	0x40021000
 8002814:	00001388 	.word	0x00001388
 8002818:	fffff8ff 	.word	0xfffff8ff
 800281c:	08004be0 	.word	0x08004be0
 8002820:	20000004 	.word	0x20000004

08002824 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002824:	b590      	push	{r4, r7, lr}
 8002826:	b08f      	sub	sp, #60	; 0x3c
 8002828:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800282a:	2314      	movs	r3, #20
 800282c:	18fb      	adds	r3, r7, r3
 800282e:	4a38      	ldr	r2, [pc, #224]	; (8002910 <HAL_RCC_GetSysClockFreq+0xec>)
 8002830:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002832:	c313      	stmia	r3!, {r0, r1, r4}
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002838:	1d3b      	adds	r3, r7, #4
 800283a:	4a36      	ldr	r2, [pc, #216]	; (8002914 <HAL_RCC_GetSysClockFreq+0xf0>)
 800283c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800283e:	c313      	stmia	r3!, {r0, r1, r4}
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002848:	2300      	movs	r3, #0
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_RCC_GetSysClockFreq+0xf4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	220c      	movs	r2, #12
 8002862:	4013      	ands	r3, r2
 8002864:	2b0c      	cmp	r3, #12
 8002866:	d047      	beq.n	80028f8 <HAL_RCC_GetSysClockFreq+0xd4>
 8002868:	d849      	bhi.n	80028fe <HAL_RCC_GetSysClockFreq+0xda>
 800286a:	2b04      	cmp	r3, #4
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x50>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x56>
 8002872:	e044      	b.n	80028fe <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002876:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002878:	e044      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	220f      	movs	r2, #15
 8002880:	4013      	ands	r3, r2
 8002882:	2214      	movs	r2, #20
 8002884:	18ba      	adds	r2, r7, r2
 8002886:	5cd3      	ldrb	r3, [r2, r3]
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800288a:	4b23      	ldr	r3, [pc, #140]	; (8002918 <HAL_RCC_GetSysClockFreq+0xf4>)
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288e:	220f      	movs	r2, #15
 8002890:	4013      	ands	r3, r2
 8002892:	1d3a      	adds	r2, r7, #4
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289a:	23c0      	movs	r3, #192	; 0xc0
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	401a      	ands	r2, r3
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	025b      	lsls	r3, r3, #9
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d109      	bne.n	80028bc <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028aa:	481c      	ldr	r0, [pc, #112]	; (800291c <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ac:	f7fd fc3e 	bl	800012c <__udivsi3>
 80028b0:	0003      	movs	r3, r0
 80028b2:	001a      	movs	r2, r3
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	4353      	muls	r3, r2
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
 80028ba:	e01a      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80028bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028be:	23c0      	movs	r3, #192	; 0xc0
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	401a      	ands	r2, r3
 80028c4:	23c0      	movs	r3, #192	; 0xc0
 80028c6:	025b      	lsls	r3, r3, #9
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d109      	bne.n	80028e0 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ce:	4814      	ldr	r0, [pc, #80]	; (8002920 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028d0:	f7fd fc2c 	bl	800012c <__udivsi3>
 80028d4:	0003      	movs	r3, r0
 80028d6:	001a      	movs	r2, r3
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	4353      	muls	r3, r2
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
 80028de:	e008      	b.n	80028f2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028e2:	480e      	ldr	r0, [pc, #56]	; (800291c <HAL_RCC_GetSysClockFreq+0xf8>)
 80028e4:	f7fd fc22 	bl	800012c <__udivsi3>
 80028e8:	0003      	movs	r3, r0
 80028ea:	001a      	movs	r2, r3
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	4353      	muls	r3, r2
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80028f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028f6:	e005      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80028fc:	e002      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002902:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b00f      	add	sp, #60	; 0x3c
 800290c:	bd90      	pop	{r4, r7, pc}
 800290e:	46c0      	nop			; (mov r8, r8)
 8002910:	08004bc0 	.word	0x08004bc0
 8002914:	08004bd0 	.word	0x08004bd0
 8002918:	40021000 	.word	0x40021000
 800291c:	007a1200 	.word	0x007a1200
 8002920:	02dc6c00 	.word	0x02dc6c00

08002924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002928:	4b02      	ldr	r3, [pc, #8]	; (8002934 <HAL_RCC_GetHCLKFreq+0x10>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	0018      	movs	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	20000004 	.word	0x20000004

08002938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800293c:	f7ff fff2 	bl	8002924 <HAL_RCC_GetHCLKFreq>
 8002940:	0001      	movs	r1, r0
 8002942:	4b06      	ldr	r3, [pc, #24]	; (800295c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	2207      	movs	r2, #7
 800294a:	4013      	ands	r3, r2
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_RCC_GetPCLK1Freq+0x28>)
 800294e:	5cd3      	ldrb	r3, [r2, r3]
 8002950:	40d9      	lsrs	r1, r3
 8002952:	000b      	movs	r3, r1
}    
 8002954:	0018      	movs	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	40021000 	.word	0x40021000
 8002960:	08004bf0 	.word	0x08004bf0

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	025b      	lsls	r3, r3, #9
 800297c:	4013      	ands	r3, r2
 800297e:	d100      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002980:	e08e      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2017      	movs	r0, #23
 8002984:	183b      	adds	r3, r7, r0
 8002986:	2200      	movs	r2, #0
 8002988:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b6e      	ldr	r3, [pc, #440]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	055b      	lsls	r3, r3, #21
 8002992:	4013      	ands	r3, r2
 8002994:	d110      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800299c:	2180      	movs	r1, #128	; 0x80
 800299e:	0549      	lsls	r1, r1, #21
 80029a0:	430a      	orrs	r2, r1
 80029a2:	61da      	str	r2, [r3, #28]
 80029a4:	4b67      	ldr	r3, [pc, #412]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	055b      	lsls	r3, r3, #21
 80029ac:	4013      	ands	r3, r2
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	183b      	adds	r3, r7, r0
 80029b4:	2201      	movs	r2, #1
 80029b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b8:	4b63      	ldr	r3, [pc, #396]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	; 0x80
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	d11a      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c4:	4b60      	ldr	r3, [pc, #384]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b5f      	ldr	r3, [pc, #380]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	0049      	lsls	r1, r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d2:	f7fe fc39 	bl	8001248 <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029da:	e008      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fe fc34 	bl	8001248 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0a6      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b56      	ldr	r3, [pc, #344]	; (8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	2380      	movs	r3, #128	; 0x80
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4013      	ands	r3, r2
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029fa:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fc:	6a1a      	ldr	r2, [r3, #32]
 80029fe:	23c0      	movs	r3, #192	; 0xc0
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4013      	ands	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d034      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	23c0      	movs	r3, #192	; 0xc0
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4013      	ands	r3, r2
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d02c      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a1c:	4b49      	ldr	r3, [pc, #292]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a28:	6a1a      	ldr	r2, [r3, #32]
 8002a2a:	4b46      	ldr	r3, [pc, #280]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a2c:	2180      	movs	r1, #128	; 0x80
 8002a2e:	0249      	lsls	r1, r1, #9
 8002a30:	430a      	orrs	r2, r1
 8002a32:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a34:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a3a:	4945      	ldr	r1, [pc, #276]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fbfb 	bl	8001248 <HAL_GetTick>
 8002a52:	0003      	movs	r3, r0
 8002a54:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a56:	e009      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a58:	f7fe fbf6 	bl	8001248 <HAL_GetTick>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	4a3c      	ldr	r2, [pc, #240]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e067      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6c:	4b35      	ldr	r3, [pc, #212]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	2202      	movs	r2, #2
 8002a72:	4013      	ands	r3, r2
 8002a74:	d0f0      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a76:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	4a34      	ldr	r2, [pc, #208]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a86:	430a      	orrs	r2, r1
 8002a88:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a8a:	2317      	movs	r3, #23
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a94:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a96:	69da      	ldr	r2, [r3, #28]
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a9a:	492f      	ldr	r1, [pc, #188]	; (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002a9c:	400a      	ands	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d009      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aaa:	4b26      	ldr	r3, [pc, #152]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aae:	2203      	movs	r2, #3
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	0019      	movs	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aba:	430a      	orrs	r2, r1
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d009      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ac8:	4b1e      	ldr	r3, [pc, #120]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	0019      	movs	r1, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	4b1b      	ldr	r3, [pc, #108]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d009      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	2210      	movs	r2, #16
 8002aec:	4393      	bics	r3, r2
 8002aee:	0019      	movs	r1, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002af6:	430a      	orrs	r2, r1
 8002af8:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	2380      	movs	r3, #128	; 0x80
 8002b00:	029b      	lsls	r3, r3, #10
 8002b02:	4013      	ands	r3, r2
 8002b04:	d009      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b06:	4b0f      	ldr	r3, [pc, #60]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b16:	430a      	orrs	r2, r1
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	2380      	movs	r3, #128	; 0x80
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	4013      	ands	r3, r2
 8002b24:	d009      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b26:	4b07      	ldr	r3, [pc, #28]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2a:	2240      	movs	r2, #64	; 0x40
 8002b2c:	4393      	bics	r3, r2
 8002b2e:	0019      	movs	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002b36:	430a      	orrs	r2, r1
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b006      	add	sp, #24
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40007000 	.word	0x40007000
 8002b4c:	fffffcff 	.word	0xfffffcff
 8002b50:	fffeffff 	.word	0xfffeffff
 8002b54:	00001388 	.word	0x00001388
 8002b58:	efffffff 	.word	0xefffffff
 8002b5c:	fffcffff 	.word	0xfffcffff

08002b60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0a8      	b.n	8002cc4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	2382      	movs	r3, #130	; 0x82
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d009      	beq.n	8002b9a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	61da      	str	r2, [r3, #28]
 8002b8c:	e005      	b.n	8002b9a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	225d      	movs	r2, #93	; 0x5d
 8002ba4:	5c9b      	ldrb	r3, [r3, r2]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	225c      	movs	r2, #92	; 0x5c
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f7fe f852 	bl	8000c60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	225d      	movs	r2, #93	; 0x5d
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	2140      	movs	r1, #64	; 0x40
 8002bd0:	438a      	bics	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	23e0      	movs	r3, #224	; 0xe0
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d902      	bls.n	8002be6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e002      	b.n	8002bec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002be6:	2380      	movs	r3, #128	; 0x80
 8002be8:	015b      	lsls	r3, r3, #5
 8002bea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	23f0      	movs	r3, #240	; 0xf0
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d008      	beq.n	8002c0a <HAL_SPI_Init+0xaa>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	23e0      	movs	r3, #224	; 0xe0
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d002      	beq.n	8002c0a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	2382      	movs	r3, #130	; 0x82
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	401a      	ands	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6899      	ldr	r1, [r3, #8]
 8002c18:	2384      	movs	r3, #132	; 0x84
 8002c1a:	021b      	lsls	r3, r3, #8
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2102      	movs	r1, #2
 8002c26:	400b      	ands	r3, r1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	2101      	movs	r1, #1
 8002c30:	400b      	ands	r3, r1
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6999      	ldr	r1, [r3, #24]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	400b      	ands	r3, r1
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	2138      	movs	r1, #56	; 0x38
 8002c46:	400b      	ands	r3, r1
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	2180      	movs	r1, #128	; 0x80
 8002c50:	400b      	ands	r3, r1
 8002c52:	431a      	orrs	r2, r3
 8002c54:	0011      	movs	r1, r2
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	019b      	lsls	r3, r3, #6
 8002c5e:	401a      	ands	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
 8002c6e:	2204      	movs	r2, #4
 8002c70:	401a      	ands	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2110      	movs	r1, #16
 8002c78:	400b      	ands	r3, r1
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	2108      	movs	r1, #8
 8002c82:	400b      	ands	r3, r1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68d9      	ldr	r1, [r3, #12]
 8002c8a:	23f0      	movs	r3, #240	; 0xf0
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	400b      	ands	r3, r1
 8002c90:	431a      	orrs	r2, r3
 8002c92:	0011      	movs	r1, r2
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69da      	ldr	r2, [r3, #28]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4907      	ldr	r1, [pc, #28]	; (8002ccc <HAL_SPI_Init+0x16c>)
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	225d      	movs	r2, #93	; 0x5d
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b004      	add	sp, #16
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	fffff7ff 	.word	0xfffff7ff

08002cd0 <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e074      	b.n	8002dcc <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	223c      	movs	r2, #60	; 0x3c
 8002ce6:	5c9b      	ldrb	r3, [r3, r2]
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	223d      	movs	r2, #61	; 0x3d
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7fd ffff 	bl	8000cfc <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	223c      	movs	r2, #60	; 0x3c
 8002d02:	2102      	movs	r1, #2
 8002d04:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002d1c:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002d24:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002d2a:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 8002d30:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002d36:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002d3c:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 8002d42:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7b1b      	ldrb	r3, [r3, #12]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d108      	bne.n	8002d66 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2180      	movs	r1, #128	; 0x80
 8002d60:	0249      	lsls	r1, r1, #9
 8002d62:	430a      	orrs	r2, r1
 8002d64:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	43d2      	mvns	r2, r2
 8002d7c:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d96:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681c      	ldr	r4, [r3, #0]
 8002da0:	0010      	movs	r0, r2
 8002da2:	f000 f817 	bl	8002dd4 <TSC_extract_groups>
 8002da6:	0003      	movs	r3, r0
 8002da8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2103      	movs	r1, #3
 8002db6:	438a      	bics	r2, r1
 8002db8:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223c      	movs	r2, #60	; 0x3c
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	0018      	movs	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b003      	add	sp, #12
 8002dd2:	bd90      	pop	{r4, r7, pc}

08002dd4 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	e011      	b.n	8002e0a <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	220f      	movs	r2, #15
 8002dec:	409a      	lsls	r2, r3
 8002dee:	0013      	movs	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	4013      	ands	r3, r2
 8002df4:	d006      	beq.n	8002e04 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002df6:	2201      	movs	r2, #1
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b07      	cmp	r3, #7
 8002e0e:	d9ea      	bls.n	8002de6 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 8002e10:	68fb      	ldr	r3, [r7, #12]
}
 8002e12:	0018      	movs	r0, r3
 8002e14:	46bd      	mov	sp, r7
 8002e16:	b004      	add	sp, #16
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e044      	b.n	8002eb8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d107      	bne.n	8002e46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2274      	movs	r2, #116	; 0x74
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	0018      	movs	r0, r3
 8002e42:	f7fd fff9 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2224      	movs	r2, #36	; 0x24
 8002e4a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2101      	movs	r1, #1
 8002e58:	438a      	bics	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f000 fc4e 	bl	8003700 <UART_SetConfig>
 8002e64:	0003      	movs	r3, r0
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e024      	b.n	8002eb8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f000 fdc9 	bl	8003a10 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	490d      	ldr	r1, [pc, #52]	; (8002ec0 <HAL_UART_Init+0xa4>)
 8002e8a:	400a      	ands	r2, r1
 8002e8c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	212a      	movs	r1, #42	; 0x2a
 8002e9a:	438a      	bics	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	f000 fe61 	bl	8003b78 <UART_CheckIdleState>
 8002eb6:	0003      	movs	r3, r0
}
 8002eb8:	0018      	movs	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	b002      	add	sp, #8
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	ffffb7ff 	.word	0xffffb7ff

08002ec4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b08a      	sub	sp, #40	; 0x28
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	603b      	str	r3, [r7, #0]
 8002ed0:	1dbb      	adds	r3, r7, #6
 8002ed2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d000      	beq.n	8002ede <HAL_UART_Transmit+0x1a>
 8002edc:	e096      	b.n	800300c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_UART_Transmit+0x28>
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e08e      	b.n	800300e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	015b      	lsls	r3, r3, #5
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d109      	bne.n	8002f10 <HAL_UART_Transmit+0x4c>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d105      	bne.n	8002f10 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2201      	movs	r2, #1
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d001      	beq.n	8002f10 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e07e      	b.n	800300e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2274      	movs	r2, #116	; 0x74
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_UART_Transmit+0x5a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e077      	b.n	800300e <HAL_UART_Transmit+0x14a>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2274      	movs	r2, #116	; 0x74
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2280      	movs	r2, #128	; 0x80
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2221      	movs	r2, #33	; 0x21
 8002f32:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f34:	f7fe f988 	bl	8001248 <HAL_GetTick>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1dba      	adds	r2, r7, #6
 8002f40:	2150      	movs	r1, #80	; 0x50
 8002f42:	8812      	ldrh	r2, [r2, #0]
 8002f44:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1dba      	adds	r2, r7, #6
 8002f4a:	2152      	movs	r1, #82	; 0x52
 8002f4c:	8812      	ldrh	r2, [r2, #0]
 8002f4e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d108      	bne.n	8002f6e <HAL_UART_Transmit+0xaa>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d104      	bne.n	8002f6e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	61bb      	str	r3, [r7, #24]
 8002f6c:	e003      	b.n	8002f76 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2274      	movs	r2, #116	; 0x74
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002f7e:	e02d      	b.n	8002fdc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	0013      	movs	r3, r2
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	f000 fe3b 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d001      	beq.n	8002f9a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e039      	b.n	800300e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d10b      	bne.n	8002fb8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	05d2      	lsls	r2, r2, #23
 8002faa:	0dd2      	lsrs	r2, r2, #23
 8002fac:	b292      	uxth	r2, r2
 8002fae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e008      	b.n	8002fca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	781a      	ldrb	r2, [r3, #0]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2252      	movs	r2, #82	; 0x52
 8002fce:	5a9b      	ldrh	r3, [r3, r2]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2252      	movs	r2, #82	; 0x52
 8002fda:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2252      	movs	r2, #82	; 0x52
 8002fe0:	5a9b      	ldrh	r3, [r3, r2]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1cb      	bne.n	8002f80 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2140      	movs	r1, #64	; 0x40
 8002ff6:	f000 fe07 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e005      	b.n	800300e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	e000      	b.n	800300e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
  }
}
 800300e:	0018      	movs	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	b008      	add	sp, #32
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	1dbb      	adds	r3, r7, #6
 8003024:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302a:	2b20      	cmp	r3, #32
 800302c:	d000      	beq.n	8003030 <HAL_UART_Transmit_IT+0x18>
 800302e:	e06a      	b.n	8003106 <HAL_UART_Transmit_IT+0xee>
  {
    if ((pData == NULL) || (Size == 0U))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_UART_Transmit_IT+0x26>
 8003036:	1dbb      	adds	r3, r7, #6
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e062      	b.n	8003108 <HAL_UART_Transmit_IT+0xf0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	2380      	movs	r3, #128	; 0x80
 8003048:	015b      	lsls	r3, r3, #5
 800304a:	429a      	cmp	r2, r3
 800304c:	d109      	bne.n	8003062 <HAL_UART_Transmit_IT+0x4a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d105      	bne.n	8003062 <HAL_UART_Transmit_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2201      	movs	r2, #1
 800305a:	4013      	ands	r3, r2
 800305c:	d001      	beq.n	8003062 <HAL_UART_Transmit_IT+0x4a>
      {
        return  HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e052      	b.n	8003108 <HAL_UART_Transmit_IT+0xf0>
      }
    }

    __HAL_LOCK(huart);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2274      	movs	r2, #116	; 0x74
 8003066:	5c9b      	ldrb	r3, [r3, r2]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d101      	bne.n	8003070 <HAL_UART_Transmit_IT+0x58>
 800306c:	2302      	movs	r3, #2
 800306e:	e04b      	b.n	8003108 <HAL_UART_Transmit_IT+0xf0>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2274      	movs	r2, #116	; 0x74
 8003074:	2101      	movs	r1, #1
 8003076:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1dba      	adds	r2, r7, #6
 8003082:	2150      	movs	r1, #80	; 0x50
 8003084:	8812      	ldrh	r2, [r2, #0]
 8003086:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	1dba      	adds	r2, r7, #6
 800308c:	2152      	movs	r1, #82	; 0x52
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2280      	movs	r2, #128	; 0x80
 800309c:	2100      	movs	r1, #0
 800309e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2221      	movs	r2, #33	; 0x21
 80030a4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d107      	bne.n	80030c2 <HAL_UART_Transmit_IT+0xaa>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d103      	bne.n	80030c2 <HAL_UART_Transmit_IT+0xaa>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a14      	ldr	r2, [pc, #80]	; (8003110 <HAL_UART_Transmit_IT+0xf8>)
 80030be:	669a      	str	r2, [r3, #104]	; 0x68
 80030c0:	e002      	b.n	80030c8 <HAL_UART_Transmit_IT+0xb0>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <HAL_UART_Transmit_IT+0xfc>)
 80030c6:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2274      	movs	r2, #116	; 0x74
 80030cc:	2100      	movs	r1, #0
 80030ce:	5499      	strb	r1, [r3, r2]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d0:	f3ef 8310 	mrs	r3, PRIMASK
 80030d4:	613b      	str	r3, [r7, #16]
  return(result);
 80030d6:	693b      	ldr	r3, [r7, #16]

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030d8:	61fb      	str	r3, [r7, #28]
 80030da:	2301      	movs	r3, #1
 80030dc:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f383 8810 	msr	PRIMASK, r3
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2180      	movs	r1, #128	; 0x80
 80030f2:	430a      	orrs	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	f383 8810 	msr	PRIMASK, r3
}
 8003100:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_UART_Transmit_IT+0xf0>
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b008      	add	sp, #32
 800310e:	bd80      	pop	{r7, pc}
 8003110:	08003f37 	.word	0x08003f37
 8003114:	08003e83 	.word	0x08003e83

08003118 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b0ab      	sub	sp, #172	; 0xac
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	22a4      	movs	r2, #164	; 0xa4
 8003128:	18b9      	adds	r1, r7, r2
 800312a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	20a0      	movs	r0, #160	; 0xa0
 8003134:	1839      	adds	r1, r7, r0
 8003136:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	219c      	movs	r1, #156	; 0x9c
 8003140:	1879      	adds	r1, r7, r1
 8003142:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003144:	0011      	movs	r1, r2
 8003146:	18bb      	adds	r3, r7, r2
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a99      	ldr	r2, [pc, #612]	; (80033b0 <HAL_UART_IRQHandler+0x298>)
 800314c:	4013      	ands	r3, r2
 800314e:	2298      	movs	r2, #152	; 0x98
 8003150:	18bc      	adds	r4, r7, r2
 8003152:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003154:	18bb      	adds	r3, r7, r2
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d114      	bne.n	8003186 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800315c:	187b      	adds	r3, r7, r1
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2220      	movs	r2, #32
 8003162:	4013      	ands	r3, r2
 8003164:	d00f      	beq.n	8003186 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003166:	183b      	adds	r3, r7, r0
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2220      	movs	r2, #32
 800316c:	4013      	ands	r3, r2
 800316e:	d00a      	beq.n	8003186 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003174:	2b00      	cmp	r3, #0
 8003176:	d100      	bne.n	800317a <HAL_UART_IRQHandler+0x62>
 8003178:	e296      	b.n	80036a8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	0010      	movs	r0, r2
 8003182:	4798      	blx	r3
      }
      return;
 8003184:	e290      	b.n	80036a8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003186:	2398      	movs	r3, #152	; 0x98
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d100      	bne.n	8003192 <HAL_UART_IRQHandler+0x7a>
 8003190:	e114      	b.n	80033bc <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003192:	239c      	movs	r3, #156	; 0x9c
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2201      	movs	r2, #1
 800319a:	4013      	ands	r3, r2
 800319c:	d106      	bne.n	80031ac <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800319e:	23a0      	movs	r3, #160	; 0xa0
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a83      	ldr	r2, [pc, #524]	; (80033b4 <HAL_UART_IRQHandler+0x29c>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	d100      	bne.n	80031ac <HAL_UART_IRQHandler+0x94>
 80031aa:	e107      	b.n	80033bc <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031ac:	23a4      	movs	r3, #164	; 0xa4
 80031ae:	18fb      	adds	r3, r7, r3
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2201      	movs	r2, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	d012      	beq.n	80031de <HAL_UART_IRQHandler+0xc6>
 80031b8:	23a0      	movs	r3, #160	; 0xa0
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	; 0x80
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d00b      	beq.n	80031de <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2201      	movs	r2, #1
 80031cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2280      	movs	r2, #128	; 0x80
 80031d2:	589b      	ldr	r3, [r3, r2]
 80031d4:	2201      	movs	r2, #1
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2180      	movs	r1, #128	; 0x80
 80031dc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031de:	23a4      	movs	r3, #164	; 0xa4
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2202      	movs	r2, #2
 80031e6:	4013      	ands	r3, r2
 80031e8:	d011      	beq.n	800320e <HAL_UART_IRQHandler+0xf6>
 80031ea:	239c      	movs	r3, #156	; 0x9c
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2202      	movs	r2, #2
 80031fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2280      	movs	r2, #128	; 0x80
 8003202:	589b      	ldr	r3, [r3, r2]
 8003204:	2204      	movs	r2, #4
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800320e:	23a4      	movs	r3, #164	; 0xa4
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2204      	movs	r2, #4
 8003216:	4013      	ands	r3, r2
 8003218:	d011      	beq.n	800323e <HAL_UART_IRQHandler+0x126>
 800321a:	239c      	movs	r3, #156	; 0x9c
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2201      	movs	r2, #1
 8003222:	4013      	ands	r3, r2
 8003224:	d00b      	beq.n	800323e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2204      	movs	r2, #4
 800322c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	589b      	ldr	r3, [r3, r2]
 8003234:	2202      	movs	r2, #2
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800323e:	23a4      	movs	r3, #164	; 0xa4
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2208      	movs	r2, #8
 8003246:	4013      	ands	r3, r2
 8003248:	d017      	beq.n	800327a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800324a:	23a0      	movs	r3, #160	; 0xa0
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2220      	movs	r2, #32
 8003252:	4013      	ands	r3, r2
 8003254:	d105      	bne.n	8003262 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003256:	239c      	movs	r3, #156	; 0x9c
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2201      	movs	r2, #1
 800325e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003260:	d00b      	beq.n	800327a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2208      	movs	r2, #8
 8003268:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	589b      	ldr	r3, [r3, r2]
 8003270:	2208      	movs	r2, #8
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800327a:	23a4      	movs	r3, #164	; 0xa4
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4013      	ands	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_UART_IRQHandler+0x198>
 8003288:	23a0      	movs	r3, #160	; 0xa0
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	04db      	lsls	r3, r3, #19
 8003292:	4013      	ands	r3, r2
 8003294:	d00c      	beq.n	80032b0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2280      	movs	r2, #128	; 0x80
 800329c:	0112      	lsls	r2, r2, #4
 800329e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	589b      	ldr	r3, [r3, r2]
 80032a6:	2220      	movs	r2, #32
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2180      	movs	r1, #128	; 0x80
 80032ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2280      	movs	r2, #128	; 0x80
 80032b4:	589b      	ldr	r3, [r3, r2]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d100      	bne.n	80032bc <HAL_UART_IRQHandler+0x1a4>
 80032ba:	e1f7      	b.n	80036ac <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032bc:	23a4      	movs	r3, #164	; 0xa4
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	4013      	ands	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c8:	23a0      	movs	r3, #160	; 0xa0
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d004      	beq.n	80032e6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	0010      	movs	r0, r2
 80032e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2280      	movs	r2, #128	; 0x80
 80032ea:	589b      	ldr	r3, [r3, r2]
 80032ec:	2194      	movs	r1, #148	; 0x94
 80032ee:	187a      	adds	r2, r7, r1
 80032f0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	2240      	movs	r2, #64	; 0x40
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b40      	cmp	r3, #64	; 0x40
 80032fe:	d004      	beq.n	800330a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003300:	187b      	adds	r3, r7, r1
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2228      	movs	r2, #40	; 0x28
 8003306:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003308:	d047      	beq.n	800339a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 fd3f 	bl	8003d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2240      	movs	r2, #64	; 0x40
 800331a:	4013      	ands	r3, r2
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d137      	bne.n	8003390 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003320:	f3ef 8310 	mrs	r3, PRIMASK
 8003324:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003328:	2090      	movs	r0, #144	; 0x90
 800332a:	183a      	adds	r2, r7, r0
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	2301      	movs	r3, #1
 8003330:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003334:	f383 8810 	msr	PRIMASK, r3
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2140      	movs	r1, #64	; 0x40
 8003346:	438a      	bics	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	183b      	adds	r3, r7, r0
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003352:	f383 8810 	msr	PRIMASK, r3
}
 8003356:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	2b00      	cmp	r3, #0
 800335e:	d012      	beq.n	8003386 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_UART_IRQHandler+0x2a0>)
 8003366:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	0018      	movs	r0, r3
 800336e:	f7fe f8f7 	bl	8001560 <HAL_DMA_Abort_IT>
 8003372:	1e03      	subs	r3, r0, #0
 8003374:	d01a      	beq.n	80033ac <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	0018      	movs	r0, r3
 8003382:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003384:	e012      	b.n	80033ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f000 f9a5 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338e:	e00d      	b.n	80033ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	0018      	movs	r0, r3
 8003394:	f000 f9a0 	bl	80036d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003398:	e008      	b.n	80033ac <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0018      	movs	r0, r3
 800339e:	f000 f99b 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2280      	movs	r2, #128	; 0x80
 80033a6:	2100      	movs	r1, #0
 80033a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033aa:	e17f      	b.n	80036ac <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	46c0      	nop			; (mov r8, r8)
    return;
 80033ae:	e17d      	b.n	80036ac <HAL_UART_IRQHandler+0x594>
 80033b0:	0000080f 	.word	0x0000080f
 80033b4:	04000120 	.word	0x04000120
 80033b8:	08003e55 	.word	0x08003e55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d000      	beq.n	80033c6 <HAL_UART_IRQHandler+0x2ae>
 80033c4:	e131      	b.n	800362a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033c6:	23a4      	movs	r3, #164	; 0xa4
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2210      	movs	r2, #16
 80033ce:	4013      	ands	r3, r2
 80033d0:	d100      	bne.n	80033d4 <HAL_UART_IRQHandler+0x2bc>
 80033d2:	e12a      	b.n	800362a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033d4:	23a0      	movs	r3, #160	; 0xa0
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2210      	movs	r2, #16
 80033dc:	4013      	ands	r3, r2
 80033de:	d100      	bne.n	80033e2 <HAL_UART_IRQHandler+0x2ca>
 80033e0:	e123      	b.n	800362a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d000      	beq.n	80033fa <HAL_UART_IRQHandler+0x2e2>
 80033f8:	e09b      	b.n	8003532 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	217e      	movs	r1, #126	; 0x7e
 8003404:	187b      	adds	r3, r7, r1
 8003406:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003408:	187b      	adds	r3, r7, r1
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d100      	bne.n	8003412 <HAL_UART_IRQHandler+0x2fa>
 8003410:	e14e      	b.n	80036b0 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2258      	movs	r2, #88	; 0x58
 8003416:	5a9b      	ldrh	r3, [r3, r2]
 8003418:	187a      	adds	r2, r7, r1
 800341a:	8812      	ldrh	r2, [r2, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d300      	bcc.n	8003422 <HAL_UART_IRQHandler+0x30a>
 8003420:	e146      	b.n	80036b0 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	187a      	adds	r2, r7, r1
 8003426:	215a      	movs	r1, #90	; 0x5a
 8003428:	8812      	ldrh	r2, [r2, #0]
 800342a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	2b20      	cmp	r3, #32
 8003434:	d06e      	beq.n	8003514 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003436:	f3ef 8310 	mrs	r3, PRIMASK
 800343a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800343e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003440:	2301      	movs	r3, #1
 8003442:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	499a      	ldr	r1, [pc, #616]	; (80036c0 <HAL_UART_IRQHandler+0x5a8>)
 8003458:	400a      	ands	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	f383 8810 	msr	PRIMASK, r3
}
 8003466:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003468:	f3ef 8310 	mrs	r3, PRIMASK
 800346c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003470:	677b      	str	r3, [r7, #116]	; 0x74
 8003472:	2301      	movs	r3, #1
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003478:	f383 8810 	msr	PRIMASK, r3
}
 800347c:	46c0      	nop			; (mov r8, r8)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689a      	ldr	r2, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2101      	movs	r1, #1
 800348a:	438a      	bics	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
 800348e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800349a:	f3ef 8310 	mrs	r3, PRIMASK
 800349e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80034a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034a2:	673b      	str	r3, [r7, #112]	; 0x70
 80034a4:	2301      	movs	r3, #1
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034aa:	f383 8810 	msr	PRIMASK, r3
}
 80034ae:	46c0      	nop			; (mov r8, r8)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2140      	movs	r1, #64	; 0x40
 80034bc:	438a      	bics	r2, r1
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034c6:	f383 8810 	msr	PRIMASK, r3
}
 80034ca:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034de:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034e2:	2301      	movs	r3, #1
 80034e4:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2110      	movs	r1, #16
 80034fa:	438a      	bics	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	0018      	movs	r0, r3
 8003510:	f7fd ffee 	bl	80014f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2258      	movs	r2, #88	; 0x58
 8003518:	5a9a      	ldrh	r2, [r3, r2]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	215a      	movs	r1, #90	; 0x5a
 800351e:	5a5b      	ldrh	r3, [r3, r1]
 8003520:	b29b      	uxth	r3, r3
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	0011      	movs	r1, r2
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f8dc 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003530:	e0be      	b.n	80036b0 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2258      	movs	r2, #88	; 0x58
 8003536:	5a99      	ldrh	r1, [r3, r2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	225a      	movs	r2, #90	; 0x5a
 800353c:	5a9b      	ldrh	r3, [r3, r2]
 800353e:	b29a      	uxth	r2, r3
 8003540:	208e      	movs	r0, #142	; 0x8e
 8003542:	183b      	adds	r3, r7, r0
 8003544:	1a8a      	subs	r2, r1, r2
 8003546:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	225a      	movs	r2, #90	; 0x5a
 800354c:	5a9b      	ldrh	r3, [r3, r2]
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b00      	cmp	r3, #0
 8003552:	d100      	bne.n	8003556 <HAL_UART_IRQHandler+0x43e>
 8003554:	e0ae      	b.n	80036b4 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 8003556:	183b      	adds	r3, r7, r0
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d100      	bne.n	8003560 <HAL_UART_IRQHandler+0x448>
 800355e:	e0a9      	b.n	80036b4 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003560:	f3ef 8310 	mrs	r3, PRIMASK
 8003564:	60fb      	str	r3, [r7, #12]
  return(result);
 8003566:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003568:	2488      	movs	r4, #136	; 0x88
 800356a:	193a      	adds	r2, r7, r4
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	2301      	movs	r3, #1
 8003570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	494f      	ldr	r1, [pc, #316]	; (80036c4 <HAL_UART_IRQHandler+0x5ac>)
 8003586:	400a      	ands	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	193b      	adds	r3, r7, r4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f383 8810 	msr	PRIMASK, r3
}
 8003596:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003598:	f3ef 8310 	mrs	r3, PRIMASK
 800359c:	61bb      	str	r3, [r7, #24]
  return(result);
 800359e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a0:	2484      	movs	r4, #132	; 0x84
 80035a2:	193a      	adds	r2, r7, r4
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	2301      	movs	r3, #1
 80035a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f383 8810 	msr	PRIMASK, r3
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2101      	movs	r1, #1
 80035be:	438a      	bics	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
 80035c2:	193b      	adds	r3, r7, r4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2220      	movs	r2, #32
 80035d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035e2:	f3ef 8310 	mrs	r3, PRIMASK
 80035e6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ea:	2480      	movs	r4, #128	; 0x80
 80035ec:	193a      	adds	r2, r7, r4
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	2301      	movs	r3, #1
 80035f2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	f383 8810 	msr	PRIMASK, r3
}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2110      	movs	r1, #16
 8003608:	438a      	bics	r2, r1
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	193b      	adds	r3, r7, r4
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	f383 8810 	msr	PRIMASK, r3
}
 8003618:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800361a:	183b      	adds	r3, r7, r0
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	0011      	movs	r1, r2
 8003622:	0018      	movs	r0, r3
 8003624:	f000 f860 	bl	80036e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003628:	e044      	b.n	80036b4 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800362a:	23a4      	movs	r3, #164	; 0xa4
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	035b      	lsls	r3, r3, #13
 8003634:	4013      	ands	r3, r2
 8003636:	d010      	beq.n	800365a <HAL_UART_IRQHandler+0x542>
 8003638:	239c      	movs	r3, #156	; 0x9c
 800363a:	18fb      	adds	r3, r7, r3
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	2380      	movs	r3, #128	; 0x80
 8003640:	03db      	lsls	r3, r3, #15
 8003642:	4013      	ands	r3, r2
 8003644:	d009      	beq.n	800365a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	0352      	lsls	r2, r2, #13
 800364e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	0018      	movs	r0, r3
 8003654:	f000 fcf8 	bl	8004048 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003658:	e02f      	b.n	80036ba <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800365a:	23a4      	movs	r3, #164	; 0xa4
 800365c:	18fb      	adds	r3, r7, r3
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	4013      	ands	r3, r2
 8003664:	d00f      	beq.n	8003686 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003666:	23a0      	movs	r3, #160	; 0xa0
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	4013      	ands	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01e      	beq.n	80036b8 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	0010      	movs	r0, r2
 8003682:	4798      	blx	r3
    }
    return;
 8003684:	e018      	b.n	80036b8 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003686:	23a4      	movs	r3, #164	; 0xa4
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2240      	movs	r2, #64	; 0x40
 800368e:	4013      	ands	r3, r2
 8003690:	d013      	beq.n	80036ba <HAL_UART_IRQHandler+0x5a2>
 8003692:	23a0      	movs	r3, #160	; 0xa0
 8003694:	18fb      	adds	r3, r7, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	d00d      	beq.n	80036ba <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0018      	movs	r0, r3
 80036a2:	f000 fca6 	bl	8003ff2 <UART_EndTransmit_IT>
    return;
 80036a6:	e008      	b.n	80036ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80036a8:	46c0      	nop			; (mov r8, r8)
 80036aa:	e006      	b.n	80036ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80036ac:	46c0      	nop			; (mov r8, r8)
 80036ae:	e004      	b.n	80036ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	e002      	b.n	80036ba <HAL_UART_IRQHandler+0x5a2>
      return;
 80036b4:	46c0      	nop			; (mov r8, r8)
 80036b6:	e000      	b.n	80036ba <HAL_UART_IRQHandler+0x5a2>
    return;
 80036b8:	46c0      	nop			; (mov r8, r8)
  }

}
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b02b      	add	sp, #172	; 0xac
 80036be:	bd90      	pop	{r4, r7, pc}
 80036c0:	fffffeff 	.word	0xfffffeff
 80036c4:	fffffedf 	.word	0xfffffedf

080036c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b002      	add	sp, #8
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036e0:	46c0      	nop			; (mov r8, r8)
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b002      	add	sp, #8
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	000a      	movs	r2, r1
 80036f2:	1cbb      	adds	r3, r7, #2
 80036f4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f6:	46c0      	nop			; (mov r8, r8)
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b002      	add	sp, #8
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003708:	231e      	movs	r3, #30
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2200      	movs	r2, #0
 800370e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	691b      	ldr	r3, [r3, #16]
 8003718:	431a      	orrs	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	4313      	orrs	r3, r2
 8003726:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4aaf      	ldr	r2, [pc, #700]	; (80039ec <UART_SetConfig+0x2ec>)
 8003730:	4013      	ands	r3, r2
 8003732:	0019      	movs	r1, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	430a      	orrs	r2, r1
 800373c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4aaa      	ldr	r2, [pc, #680]	; (80039f0 <UART_SetConfig+0x2f0>)
 8003746:	4013      	ands	r3, r2
 8003748:	0019      	movs	r1, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	4aa1      	ldr	r2, [pc, #644]	; (80039f4 <UART_SetConfig+0x2f4>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a9d      	ldr	r2, [pc, #628]	; (80039f8 <UART_SetConfig+0x2f8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d127      	bne.n	80037d6 <UART_SetConfig+0xd6>
 8003786:	4b9d      	ldr	r3, [pc, #628]	; (80039fc <UART_SetConfig+0x2fc>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	2203      	movs	r2, #3
 800378c:	4013      	ands	r3, r2
 800378e:	2b03      	cmp	r3, #3
 8003790:	d00d      	beq.n	80037ae <UART_SetConfig+0xae>
 8003792:	d81b      	bhi.n	80037cc <UART_SetConfig+0xcc>
 8003794:	2b02      	cmp	r3, #2
 8003796:	d014      	beq.n	80037c2 <UART_SetConfig+0xc2>
 8003798:	d818      	bhi.n	80037cc <UART_SetConfig+0xcc>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <UART_SetConfig+0xa4>
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d00a      	beq.n	80037b8 <UART_SetConfig+0xb8>
 80037a2:	e013      	b.n	80037cc <UART_SetConfig+0xcc>
 80037a4:	231f      	movs	r3, #31
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	e065      	b.n	800387a <UART_SetConfig+0x17a>
 80037ae:	231f      	movs	r3, #31
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	2202      	movs	r2, #2
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e060      	b.n	800387a <UART_SetConfig+0x17a>
 80037b8:	231f      	movs	r3, #31
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	2204      	movs	r2, #4
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e05b      	b.n	800387a <UART_SetConfig+0x17a>
 80037c2:	231f      	movs	r3, #31
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	2208      	movs	r2, #8
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e056      	b.n	800387a <UART_SetConfig+0x17a>
 80037cc:	231f      	movs	r3, #31
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2210      	movs	r2, #16
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e051      	b.n	800387a <UART_SetConfig+0x17a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a89      	ldr	r2, [pc, #548]	; (8003a00 <UART_SetConfig+0x300>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d134      	bne.n	800384a <UART_SetConfig+0x14a>
 80037e0:	4b86      	ldr	r3, [pc, #536]	; (80039fc <UART_SetConfig+0x2fc>)
 80037e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e4:	23c0      	movs	r3, #192	; 0xc0
 80037e6:	029b      	lsls	r3, r3, #10
 80037e8:	4013      	ands	r3, r2
 80037ea:	22c0      	movs	r2, #192	; 0xc0
 80037ec:	0292      	lsls	r2, r2, #10
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d017      	beq.n	8003822 <UART_SetConfig+0x122>
 80037f2:	22c0      	movs	r2, #192	; 0xc0
 80037f4:	0292      	lsls	r2, r2, #10
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d822      	bhi.n	8003840 <UART_SetConfig+0x140>
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	0292      	lsls	r2, r2, #10
 80037fe:	4293      	cmp	r3, r2
 8003800:	d019      	beq.n	8003836 <UART_SetConfig+0x136>
 8003802:	2280      	movs	r2, #128	; 0x80
 8003804:	0292      	lsls	r2, r2, #10
 8003806:	4293      	cmp	r3, r2
 8003808:	d81a      	bhi.n	8003840 <UART_SetConfig+0x140>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d004      	beq.n	8003818 <UART_SetConfig+0x118>
 800380e:	2280      	movs	r2, #128	; 0x80
 8003810:	0252      	lsls	r2, r2, #9
 8003812:	4293      	cmp	r3, r2
 8003814:	d00a      	beq.n	800382c <UART_SetConfig+0x12c>
 8003816:	e013      	b.n	8003840 <UART_SetConfig+0x140>
 8003818:	231f      	movs	r3, #31
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
 8003820:	e02b      	b.n	800387a <UART_SetConfig+0x17a>
 8003822:	231f      	movs	r3, #31
 8003824:	18fb      	adds	r3, r7, r3
 8003826:	2202      	movs	r2, #2
 8003828:	701a      	strb	r2, [r3, #0]
 800382a:	e026      	b.n	800387a <UART_SetConfig+0x17a>
 800382c:	231f      	movs	r3, #31
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2204      	movs	r2, #4
 8003832:	701a      	strb	r2, [r3, #0]
 8003834:	e021      	b.n	800387a <UART_SetConfig+0x17a>
 8003836:	231f      	movs	r3, #31
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2208      	movs	r2, #8
 800383c:	701a      	strb	r2, [r3, #0]
 800383e:	e01c      	b.n	800387a <UART_SetConfig+0x17a>
 8003840:	231f      	movs	r3, #31
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2210      	movs	r2, #16
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e017      	b.n	800387a <UART_SetConfig+0x17a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6d      	ldr	r2, [pc, #436]	; (8003a04 <UART_SetConfig+0x304>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d104      	bne.n	800385e <UART_SetConfig+0x15e>
 8003854:	231f      	movs	r3, #31
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00d      	b.n	800387a <UART_SetConfig+0x17a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a69      	ldr	r2, [pc, #420]	; (8003a08 <UART_SetConfig+0x308>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d104      	bne.n	8003872 <UART_SetConfig+0x172>
 8003868:	231f      	movs	r3, #31
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
 8003870:	e003      	b.n	800387a <UART_SetConfig+0x17a>
 8003872:	231f      	movs	r3, #31
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2210      	movs	r2, #16
 8003878:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	2380      	movs	r3, #128	; 0x80
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	429a      	cmp	r2, r3
 8003884:	d15d      	bne.n	8003942 <UART_SetConfig+0x242>
  {
    switch (clocksource)
 8003886:	231f      	movs	r3, #31
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b08      	cmp	r3, #8
 800388e:	d015      	beq.n	80038bc <UART_SetConfig+0x1bc>
 8003890:	dc18      	bgt.n	80038c4 <UART_SetConfig+0x1c4>
 8003892:	2b04      	cmp	r3, #4
 8003894:	d00d      	beq.n	80038b2 <UART_SetConfig+0x1b2>
 8003896:	dc15      	bgt.n	80038c4 <UART_SetConfig+0x1c4>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <UART_SetConfig+0x1a2>
 800389c:	2b02      	cmp	r3, #2
 800389e:	d005      	beq.n	80038ac <UART_SetConfig+0x1ac>
 80038a0:	e010      	b.n	80038c4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7ff f849 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 80038a6:	0003      	movs	r3, r0
 80038a8:	61bb      	str	r3, [r7, #24]
        break;
 80038aa:	e012      	b.n	80038d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038ac:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <UART_SetConfig+0x30c>)
 80038ae:	61bb      	str	r3, [r7, #24]
        break;
 80038b0:	e00f      	b.n	80038d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038b2:	f7fe ffb7 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 80038b6:	0003      	movs	r3, r0
 80038b8:	61bb      	str	r3, [r7, #24]
        break;
 80038ba:	e00a      	b.n	80038d2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038bc:	2380      	movs	r3, #128	; 0x80
 80038be:	021b      	lsls	r3, r3, #8
 80038c0:	61bb      	str	r3, [r7, #24]
        break;
 80038c2:	e006      	b.n	80038d2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038c8:	231e      	movs	r3, #30
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
        break;
 80038d0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d100      	bne.n	80038da <UART_SetConfig+0x1da>
 80038d8:	e07b      	b.n	80039d2 <UART_SetConfig+0x2d2>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	005a      	lsls	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	18d2      	adds	r2, r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0019      	movs	r1, r3
 80038ec:	0010      	movs	r0, r2
 80038ee:	f7fc fc1d 	bl	800012c <__udivsi3>
 80038f2:	0003      	movs	r3, r0
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	2b0f      	cmp	r3, #15
 80038fc:	d91c      	bls.n	8003938 <UART_SetConfig+0x238>
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	025b      	lsls	r3, r3, #9
 8003904:	429a      	cmp	r2, r3
 8003906:	d217      	bcs.n	8003938 <UART_SetConfig+0x238>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	b29a      	uxth	r2, r3
 800390c:	200e      	movs	r0, #14
 800390e:	183b      	adds	r3, r7, r0
 8003910:	210f      	movs	r1, #15
 8003912:	438a      	bics	r2, r1
 8003914:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	2207      	movs	r2, #7
 800391e:	4013      	ands	r3, r2
 8003920:	b299      	uxth	r1, r3
 8003922:	183b      	adds	r3, r7, r0
 8003924:	183a      	adds	r2, r7, r0
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	183a      	adds	r2, r7, r0
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	e04c      	b.n	80039d2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 8003938:	231e      	movs	r3, #30
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e047      	b.n	80039d2 <UART_SetConfig+0x2d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d015      	beq.n	8003978 <UART_SetConfig+0x278>
 800394c:	dc18      	bgt.n	8003980 <UART_SetConfig+0x280>
 800394e:	2b04      	cmp	r3, #4
 8003950:	d00d      	beq.n	800396e <UART_SetConfig+0x26e>
 8003952:	dc15      	bgt.n	8003980 <UART_SetConfig+0x280>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <UART_SetConfig+0x25e>
 8003958:	2b02      	cmp	r3, #2
 800395a:	d005      	beq.n	8003968 <UART_SetConfig+0x268>
 800395c:	e010      	b.n	8003980 <UART_SetConfig+0x280>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395e:	f7fe ffeb 	bl	8002938 <HAL_RCC_GetPCLK1Freq>
 8003962:	0003      	movs	r3, r0
 8003964:	61bb      	str	r3, [r7, #24]
        break;
 8003966:	e012      	b.n	800398e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003968:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <UART_SetConfig+0x30c>)
 800396a:	61bb      	str	r3, [r7, #24]
        break;
 800396c:	e00f      	b.n	800398e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7fe ff59 	bl	8002824 <HAL_RCC_GetSysClockFreq>
 8003972:	0003      	movs	r3, r0
 8003974:	61bb      	str	r3, [r7, #24]
        break;
 8003976:	e00a      	b.n	800398e <UART_SetConfig+0x28e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	61bb      	str	r3, [r7, #24]
        break;
 800397e:	e006      	b.n	800398e <UART_SetConfig+0x28e>
      default:
        pclk = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003984:	231e      	movs	r3, #30
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
        break;
 800398c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01e      	beq.n	80039d2 <UART_SetConfig+0x2d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	085a      	lsrs	r2, r3, #1
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	18d2      	adds	r2, r2, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0019      	movs	r1, r3
 80039a4:	0010      	movs	r0, r2
 80039a6:	f7fc fbc1 	bl	800012c <__udivsi3>
 80039aa:	0003      	movs	r3, r0
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b0f      	cmp	r3, #15
 80039b4:	d909      	bls.n	80039ca <UART_SetConfig+0x2ca>
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	025b      	lsls	r3, r3, #9
 80039bc:	429a      	cmp	r2, r3
 80039be:	d204      	bcs.n	80039ca <UART_SetConfig+0x2ca>
      {
        huart->Instance->BRR = usartdiv;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	60da      	str	r2, [r3, #12]
 80039c8:	e003      	b.n	80039d2 <UART_SetConfig+0x2d2>
      }
      else
      {
        ret = HAL_ERROR;
 80039ca:	231e      	movs	r3, #30
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2201      	movs	r2, #1
 80039d0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039de:	231e      	movs	r3, #30
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	781b      	ldrb	r3, [r3, #0]
}
 80039e4:	0018      	movs	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	b008      	add	sp, #32
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	efff69f3 	.word	0xefff69f3
 80039f0:	ffffcfff 	.word	0xffffcfff
 80039f4:	fffff4ff 	.word	0xfffff4ff
 80039f8:	40013800 	.word	0x40013800
 80039fc:	40021000 	.word	0x40021000
 8003a00:	40004400 	.word	0x40004400
 8003a04:	40004800 	.word	0x40004800
 8003a08:	40004c00 	.word	0x40004c00
 8003a0c:	007a1200 	.word	0x007a1200

08003a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4013      	ands	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <UART_AdvFeatureConfig+0x144>)
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	0019      	movs	r1, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2202      	movs	r2, #2
 8003a40:	4013      	ands	r3, r2
 8003a42:	d00b      	beq.n	8003a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4a43      	ldr	r2, [pc, #268]	; (8003b58 <UART_AdvFeatureConfig+0x148>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2204      	movs	r2, #4
 8003a62:	4013      	ands	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4a3b      	ldr	r2, [pc, #236]	; (8003b5c <UART_AdvFeatureConfig+0x14c>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	0019      	movs	r1, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a82:	2208      	movs	r2, #8
 8003a84:	4013      	ands	r3, r2
 8003a86:	d00b      	beq.n	8003aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <UART_AdvFeatureConfig+0x150>)
 8003a90:	4013      	ands	r3, r2
 8003a92:	0019      	movs	r1, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d00b      	beq.n	8003ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a2c      	ldr	r2, [pc, #176]	; (8003b64 <UART_AdvFeatureConfig+0x154>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4a25      	ldr	r2, [pc, #148]	; (8003b68 <UART_AdvFeatureConfig+0x158>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	2240      	movs	r2, #64	; 0x40
 8003aea:	4013      	ands	r3, r2
 8003aec:	d01d      	beq.n	8003b2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	4a1d      	ldr	r2, [pc, #116]	; (8003b6c <UART_AdvFeatureConfig+0x15c>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	0019      	movs	r1, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0a:	2380      	movs	r3, #128	; 0x80
 8003b0c:	035b      	lsls	r3, r3, #13
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d10b      	bne.n	8003b2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <UART_AdvFeatureConfig+0x160>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	2280      	movs	r2, #128	; 0x80
 8003b30:	4013      	ands	r3, r2
 8003b32:	d00b      	beq.n	8003b4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4a0e      	ldr	r2, [pc, #56]	; (8003b74 <UART_AdvFeatureConfig+0x164>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	605a      	str	r2, [r3, #4]
  }
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	fffdffff 	.word	0xfffdffff
 8003b58:	fffeffff 	.word	0xfffeffff
 8003b5c:	fffbffff 	.word	0xfffbffff
 8003b60:	ffff7fff 	.word	0xffff7fff
 8003b64:	ffffefff 	.word	0xffffefff
 8003b68:	ffffdfff 	.word	0xffffdfff
 8003b6c:	ffefffff 	.word	0xffefffff
 8003b70:	ff9fffff 	.word	0xff9fffff
 8003b74:	fff7ffff 	.word	0xfff7ffff

08003b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2280      	movs	r2, #128	; 0x80
 8003b84:	2100      	movs	r1, #0
 8003b86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b88:	f7fd fb5e 	bl	8001248 <HAL_GetTick>
 8003b8c:	0003      	movs	r3, r0
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2208      	movs	r2, #8
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d10c      	bne.n	8003bb8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	0391      	lsls	r1, r2, #14
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <UART_CheckIdleState+0x8c>)
 8003ba8:	9200      	str	r2, [sp, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f000 f82c 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e021      	b.n	8003bfc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2204      	movs	r2, #4
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d10c      	bne.n	8003be0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2280      	movs	r2, #128	; 0x80
 8003bca:	03d1      	lsls	r1, r2, #15
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <UART_CheckIdleState+0x8c>)
 8003bd0:	9200      	str	r2, [sp, #0]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f000 f818 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003bd8:	1e03      	subs	r3, r0, #0
 8003bda:	d001      	beq.n	8003be0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e00d      	b.n	8003bfc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2220      	movs	r2, #32
 8003bea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2274      	movs	r2, #116	; 0x74
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b004      	add	sp, #16
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	01ffffff 	.word	0x01ffffff

08003c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b094      	sub	sp, #80	; 0x50
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	e0a3      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	d100      	bne.n	8003c22 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003c20:	e09f      	b.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c22:	f7fd fb11 	bl	8001248 <HAL_GetTick>
 8003c26:	0002      	movs	r2, r0
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d302      	bcc.n	8003c38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d13d      	bne.n	8003cb4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c38:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c40:	647b      	str	r3, [r7, #68]	; 0x44
 8003c42:	2301      	movs	r3, #1
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	494c      	ldr	r1, [pc, #304]	; (8003d8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c60:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	643b      	str	r3, [r7, #64]	; 0x40
 8003c74:	2301      	movs	r3, #1
 8003c76:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2274      	movs	r2, #116	; 0x74
 8003cac:	2100      	movs	r1, #0
 8003cae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e067      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	d050      	beq.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	401a      	ands	r2, r3
 8003ccc:	2380      	movs	r3, #128	; 0x80
 8003cce:	011b      	lsls	r3, r3, #4
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d146      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2280      	movs	r2, #128	; 0x80
 8003cda:	0112      	lsls	r2, r2, #4
 8003cdc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cde:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce2:	613b      	str	r3, [r7, #16]
  return(result);
 8003ce4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ce8:	2301      	movs	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f383 8810 	msr	PRIMASK, r3
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4923      	ldr	r1, [pc, #140]	; (8003d8c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f383 8810 	msr	PRIMASK, r3
}
 8003d0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d10:	f3ef 8310 	mrs	r3, PRIMASK
 8003d14:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d16:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6a3b      	ldr	r3, [r7, #32]
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2101      	movs	r1, #1
 8003d32:	438a      	bics	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2280      	movs	r2, #128	; 0x80
 8003d52:	2120      	movs	r1, #32
 8003d54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2274      	movs	r2, #116	; 0x74
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e010      	b.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69db      	ldr	r3, [r3, #28]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	425a      	negs	r2, r3
 8003d72:	4153      	adcs	r3, r2
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	001a      	movs	r2, r3
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d100      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003d80:	e74b      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	0018      	movs	r0, r3
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b014      	add	sp, #80	; 0x50
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	fffffe5f 	.word	0xfffffe5f

08003d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d98:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4925      	ldr	r1, [pc, #148]	; (8003e50 <UART_EndRxTransfer+0xc0>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dca:	f3ef 8310 	mrs	r3, PRIMASK
 8003dce:	623b      	str	r3, [r7, #32]
  return(result);
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2101      	movs	r1, #1
 8003dec:	438a      	bics	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d118      	bne.n	8003e36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0e:	2301      	movs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2110      	movs	r1, #16
 8003e26:	438a      	bics	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003e48:	46c0      	nop			; (mov r8, r8)
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	b00e      	add	sp, #56	; 0x38
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	fffffedf 	.word	0xfffffedf

08003e54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	225a      	movs	r2, #90	; 0x5a
 8003e66:	2100      	movs	r1, #0
 8003e68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2252      	movs	r2, #82	; 0x52
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fc2f 	bl	80036d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b004      	add	sp, #16
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b08a      	sub	sp, #40	; 0x28
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8e:	2b21      	cmp	r3, #33	; 0x21
 8003e90:	d14d      	bne.n	8003f2e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2252      	movs	r2, #82	; 0x52
 8003e96:	5a9b      	ldrh	r3, [r3, r2]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d132      	bne.n	8003f04 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f383 8810 	msr	PRIMASK, r3
}
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2180      	movs	r1, #128	; 0x80
 8003ec0:	438a      	bics	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f383 8810 	msr	PRIMASK, r3
}
 8003ece:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ed6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	2301      	movs	r3, #1
 8003edc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f02:	e014      	b.n	8003f2e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	781a      	ldrb	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	b292      	uxth	r2, r2
 8003f10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2252      	movs	r2, #82	; 0x52
 8003f20:	5a9b      	ldrh	r3, [r3, r2]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b299      	uxth	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2252      	movs	r2, #82	; 0x52
 8003f2c:	5299      	strh	r1, [r3, r2]
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
 8003f30:	46bd      	mov	sp, r7
 8003f32:	b00a      	add	sp, #40	; 0x28
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08c      	sub	sp, #48	; 0x30
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f42:	2b21      	cmp	r3, #33	; 0x21
 8003f44:	d151      	bne.n	8003fea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2252      	movs	r2, #82	; 0x52
 8003f4a:	5a9b      	ldrh	r3, [r3, r2]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d132      	bne.n	8003fb8 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f52:	f3ef 8310 	mrs	r3, PRIMASK
 8003f56:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f58:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f383 8810 	msr	PRIMASK, r3
}
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	438a      	bics	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f84:	f3ef 8310 	mrs	r3, PRIMASK
 8003f88:	61bb      	str	r3, [r7, #24]
  return(result);
 8003f8a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f383 8810 	msr	PRIMASK, r3
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2140      	movs	r1, #64	; 0x40
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fae:	6a3b      	ldr	r3, [r7, #32]
 8003fb0:	f383 8810 	msr	PRIMASK, r3
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003fb6:	e018      	b.n	8003fea <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	881a      	ldrh	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	05d2      	lsls	r2, r2, #23
 8003fc8:	0dd2      	lsrs	r2, r2, #23
 8003fca:	b292      	uxth	r2, r2
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd2:	1c9a      	adds	r2, r3, #2
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2252      	movs	r2, #82	; 0x52
 8003fdc:	5a9b      	ldrh	r3, [r3, r2]
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b299      	uxth	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2252      	movs	r2, #82	; 0x52
 8003fe8:	5299      	strh	r1, [r3, r2]
}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b00c      	add	sp, #48	; 0x30
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b086      	sub	sp, #24
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004000:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	2301      	movs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f383 8810 	msr	PRIMASK, r3
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2140      	movs	r1, #64	; 0x40
 800401c:	438a      	bics	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2220      	movs	r2, #32
 8004030:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff fb44 	bl	80036c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b006      	add	sp, #24
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46bd      	mov	sp, r7
 8004054:	b002      	add	sp, #8
 8004056:	bd80      	pop	{r7, pc}

08004058 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004060:	4b09      	ldr	r3, [pc, #36]	; (8004088 <USB_DisableGlobalInt+0x30>)
 8004062:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2240      	movs	r2, #64	; 0x40
 8004068:	5a9b      	ldrh	r3, [r3, r2]
 800406a:	b29b      	uxth	r3, r3
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	b292      	uxth	r2, r2
 8004070:	43d2      	mvns	r2, r2
 8004072:	b292      	uxth	r2, r2
 8004074:	4013      	ands	r3, r2
 8004076:	b299      	uxth	r1, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b004      	add	sp, #16
 8004086:	bd80      	pop	{r7, pc}
 8004088:	0000bf80 	.word	0x0000bf80

0800408c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800408c:	b084      	sub	sp, #16
 800408e:	b590      	push	{r4, r7, lr}
 8004090:	b083      	sub	sp, #12
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	2004      	movs	r0, #4
 8004098:	2410      	movs	r4, #16
 800409a:	1900      	adds	r0, r0, r4
 800409c:	2408      	movs	r4, #8
 800409e:	46a4      	mov	ip, r4
 80040a0:	44bc      	add	ip, r7
 80040a2:	4460      	add	r0, ip
 80040a4:	6001      	str	r1, [r0, #0]
 80040a6:	6042      	str	r2, [r0, #4]
 80040a8:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2240      	movs	r2, #64	; 0x40
 80040ae:	2101      	movs	r1, #1
 80040b0:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2240      	movs	r2, #64	; 0x40
 80040b6:	2100      	movs	r1, #0
 80040b8:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2244      	movs	r2, #68	; 0x44
 80040be:	2100      	movs	r1, #0
 80040c0:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2250      	movs	r2, #80	; 0x50
 80040c6:	2100      	movs	r1, #0
 80040c8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b003      	add	sp, #12
 80040d2:	bc90      	pop	{r4, r7}
 80040d4:	bc08      	pop	{r3}
 80040d6:	b004      	add	sp, #16
 80040d8:	4718      	bx	r3
	...

080040dc <__errno>:
 80040dc:	4b01      	ldr	r3, [pc, #4]	; (80040e4 <__errno+0x8>)
 80040de:	6818      	ldr	r0, [r3, #0]
 80040e0:	4770      	bx	lr
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	20000010 	.word	0x20000010

080040e8 <__libc_init_array>:
 80040e8:	b570      	push	{r4, r5, r6, lr}
 80040ea:	2600      	movs	r6, #0
 80040ec:	4d0c      	ldr	r5, [pc, #48]	; (8004120 <__libc_init_array+0x38>)
 80040ee:	4c0d      	ldr	r4, [pc, #52]	; (8004124 <__libc_init_array+0x3c>)
 80040f0:	1b64      	subs	r4, r4, r5
 80040f2:	10a4      	asrs	r4, r4, #2
 80040f4:	42a6      	cmp	r6, r4
 80040f6:	d109      	bne.n	800410c <__libc_init_array+0x24>
 80040f8:	2600      	movs	r6, #0
 80040fa:	f000 fca1 	bl	8004a40 <_init>
 80040fe:	4d0a      	ldr	r5, [pc, #40]	; (8004128 <__libc_init_array+0x40>)
 8004100:	4c0a      	ldr	r4, [pc, #40]	; (800412c <__libc_init_array+0x44>)
 8004102:	1b64      	subs	r4, r4, r5
 8004104:	10a4      	asrs	r4, r4, #2
 8004106:	42a6      	cmp	r6, r4
 8004108:	d105      	bne.n	8004116 <__libc_init_array+0x2e>
 800410a:	bd70      	pop	{r4, r5, r6, pc}
 800410c:	00b3      	lsls	r3, r6, #2
 800410e:	58eb      	ldr	r3, [r5, r3]
 8004110:	4798      	blx	r3
 8004112:	3601      	adds	r6, #1
 8004114:	e7ee      	b.n	80040f4 <__libc_init_array+0xc>
 8004116:	00b3      	lsls	r3, r6, #2
 8004118:	58eb      	ldr	r3, [r5, r3]
 800411a:	4798      	blx	r3
 800411c:	3601      	adds	r6, #1
 800411e:	e7f2      	b.n	8004106 <__libc_init_array+0x1e>
 8004120:	08004c2c 	.word	0x08004c2c
 8004124:	08004c2c 	.word	0x08004c2c
 8004128:	08004c2c 	.word	0x08004c2c
 800412c:	08004c30 	.word	0x08004c30

08004130 <memcpy>:
 8004130:	2300      	movs	r3, #0
 8004132:	b510      	push	{r4, lr}
 8004134:	429a      	cmp	r2, r3
 8004136:	d100      	bne.n	800413a <memcpy+0xa>
 8004138:	bd10      	pop	{r4, pc}
 800413a:	5ccc      	ldrb	r4, [r1, r3]
 800413c:	54c4      	strb	r4, [r0, r3]
 800413e:	3301      	adds	r3, #1
 8004140:	e7f8      	b.n	8004134 <memcpy+0x4>

08004142 <memset>:
 8004142:	0003      	movs	r3, r0
 8004144:	1882      	adds	r2, r0, r2
 8004146:	4293      	cmp	r3, r2
 8004148:	d100      	bne.n	800414c <memset+0xa>
 800414a:	4770      	bx	lr
 800414c:	7019      	strb	r1, [r3, #0]
 800414e:	3301      	adds	r3, #1
 8004150:	e7f9      	b.n	8004146 <memset+0x4>
	...

08004154 <_free_r>:
 8004154:	b570      	push	{r4, r5, r6, lr}
 8004156:	0005      	movs	r5, r0
 8004158:	2900      	cmp	r1, #0
 800415a:	d010      	beq.n	800417e <_free_r+0x2a>
 800415c:	1f0c      	subs	r4, r1, #4
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da00      	bge.n	8004166 <_free_r+0x12>
 8004164:	18e4      	adds	r4, r4, r3
 8004166:	0028      	movs	r0, r5
 8004168:	f000 f91e 	bl	80043a8 <__malloc_lock>
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <_free_r+0x90>)
 800416e:	6813      	ldr	r3, [r2, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <_free_r+0x2c>
 8004174:	6063      	str	r3, [r4, #4]
 8004176:	6014      	str	r4, [r2, #0]
 8004178:	0028      	movs	r0, r5
 800417a:	f000 f91d 	bl	80043b8 <__malloc_unlock>
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	42a3      	cmp	r3, r4
 8004182:	d908      	bls.n	8004196 <_free_r+0x42>
 8004184:	6821      	ldr	r1, [r4, #0]
 8004186:	1860      	adds	r0, r4, r1
 8004188:	4283      	cmp	r3, r0
 800418a:	d1f3      	bne.n	8004174 <_free_r+0x20>
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	1841      	adds	r1, r0, r1
 8004192:	6021      	str	r1, [r4, #0]
 8004194:	e7ee      	b.n	8004174 <_free_r+0x20>
 8004196:	001a      	movs	r2, r3
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <_free_r+0x4e>
 800419e:	42a3      	cmp	r3, r4
 80041a0:	d9f9      	bls.n	8004196 <_free_r+0x42>
 80041a2:	6811      	ldr	r1, [r2, #0]
 80041a4:	1850      	adds	r0, r2, r1
 80041a6:	42a0      	cmp	r0, r4
 80041a8:	d10b      	bne.n	80041c2 <_free_r+0x6e>
 80041aa:	6820      	ldr	r0, [r4, #0]
 80041ac:	1809      	adds	r1, r1, r0
 80041ae:	1850      	adds	r0, r2, r1
 80041b0:	6011      	str	r1, [r2, #0]
 80041b2:	4283      	cmp	r3, r0
 80041b4:	d1e0      	bne.n	8004178 <_free_r+0x24>
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	1841      	adds	r1, r0, r1
 80041bc:	6011      	str	r1, [r2, #0]
 80041be:	6053      	str	r3, [r2, #4]
 80041c0:	e7da      	b.n	8004178 <_free_r+0x24>
 80041c2:	42a0      	cmp	r0, r4
 80041c4:	d902      	bls.n	80041cc <_free_r+0x78>
 80041c6:	230c      	movs	r3, #12
 80041c8:	602b      	str	r3, [r5, #0]
 80041ca:	e7d5      	b.n	8004178 <_free_r+0x24>
 80041cc:	6821      	ldr	r1, [r4, #0]
 80041ce:	1860      	adds	r0, r4, r1
 80041d0:	4283      	cmp	r3, r0
 80041d2:	d103      	bne.n	80041dc <_free_r+0x88>
 80041d4:	6818      	ldr	r0, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	1841      	adds	r1, r0, r1
 80041da:	6021      	str	r1, [r4, #0]
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	6054      	str	r4, [r2, #4]
 80041e0:	e7ca      	b.n	8004178 <_free_r+0x24>
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	20001244 	.word	0x20001244

080041e8 <sbrk_aligned>:
 80041e8:	b570      	push	{r4, r5, r6, lr}
 80041ea:	4e0f      	ldr	r6, [pc, #60]	; (8004228 <sbrk_aligned+0x40>)
 80041ec:	000d      	movs	r5, r1
 80041ee:	6831      	ldr	r1, [r6, #0]
 80041f0:	0004      	movs	r4, r0
 80041f2:	2900      	cmp	r1, #0
 80041f4:	d102      	bne.n	80041fc <sbrk_aligned+0x14>
 80041f6:	f000 f88f 	bl	8004318 <_sbrk_r>
 80041fa:	6030      	str	r0, [r6, #0]
 80041fc:	0029      	movs	r1, r5
 80041fe:	0020      	movs	r0, r4
 8004200:	f000 f88a 	bl	8004318 <_sbrk_r>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d00a      	beq.n	800421e <sbrk_aligned+0x36>
 8004208:	2303      	movs	r3, #3
 800420a:	1cc5      	adds	r5, r0, #3
 800420c:	439d      	bics	r5, r3
 800420e:	42a8      	cmp	r0, r5
 8004210:	d007      	beq.n	8004222 <sbrk_aligned+0x3a>
 8004212:	1a29      	subs	r1, r5, r0
 8004214:	0020      	movs	r0, r4
 8004216:	f000 f87f 	bl	8004318 <_sbrk_r>
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	d101      	bne.n	8004222 <sbrk_aligned+0x3a>
 800421e:	2501      	movs	r5, #1
 8004220:	426d      	negs	r5, r5
 8004222:	0028      	movs	r0, r5
 8004224:	bd70      	pop	{r4, r5, r6, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20001248 	.word	0x20001248

0800422c <_malloc_r>:
 800422c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800422e:	2203      	movs	r2, #3
 8004230:	1ccb      	adds	r3, r1, #3
 8004232:	4393      	bics	r3, r2
 8004234:	3308      	adds	r3, #8
 8004236:	0006      	movs	r6, r0
 8004238:	001f      	movs	r7, r3
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d232      	bcs.n	80042a4 <_malloc_r+0x78>
 800423e:	270c      	movs	r7, #12
 8004240:	42b9      	cmp	r1, r7
 8004242:	d831      	bhi.n	80042a8 <_malloc_r+0x7c>
 8004244:	0030      	movs	r0, r6
 8004246:	f000 f8af 	bl	80043a8 <__malloc_lock>
 800424a:	4d32      	ldr	r5, [pc, #200]	; (8004314 <_malloc_r+0xe8>)
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	001c      	movs	r4, r3
 8004250:	2c00      	cmp	r4, #0
 8004252:	d12e      	bne.n	80042b2 <_malloc_r+0x86>
 8004254:	0039      	movs	r1, r7
 8004256:	0030      	movs	r0, r6
 8004258:	f7ff ffc6 	bl	80041e8 <sbrk_aligned>
 800425c:	0004      	movs	r4, r0
 800425e:	1c43      	adds	r3, r0, #1
 8004260:	d11e      	bne.n	80042a0 <_malloc_r+0x74>
 8004262:	682c      	ldr	r4, [r5, #0]
 8004264:	0025      	movs	r5, r4
 8004266:	2d00      	cmp	r5, #0
 8004268:	d14a      	bne.n	8004300 <_malloc_r+0xd4>
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0029      	movs	r1, r5
 800426e:	18e3      	adds	r3, r4, r3
 8004270:	0030      	movs	r0, r6
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	f000 f850 	bl	8004318 <_sbrk_r>
 8004278:	9b01      	ldr	r3, [sp, #4]
 800427a:	4283      	cmp	r3, r0
 800427c:	d143      	bne.n	8004306 <_malloc_r+0xda>
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	3703      	adds	r7, #3
 8004282:	1aff      	subs	r7, r7, r3
 8004284:	2303      	movs	r3, #3
 8004286:	439f      	bics	r7, r3
 8004288:	3708      	adds	r7, #8
 800428a:	2f0c      	cmp	r7, #12
 800428c:	d200      	bcs.n	8004290 <_malloc_r+0x64>
 800428e:	270c      	movs	r7, #12
 8004290:	0039      	movs	r1, r7
 8004292:	0030      	movs	r0, r6
 8004294:	f7ff ffa8 	bl	80041e8 <sbrk_aligned>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d034      	beq.n	8004306 <_malloc_r+0xda>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	19df      	adds	r7, r3, r7
 80042a0:	6027      	str	r7, [r4, #0]
 80042a2:	e013      	b.n	80042cc <_malloc_r+0xa0>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	dacb      	bge.n	8004240 <_malloc_r+0x14>
 80042a8:	230c      	movs	r3, #12
 80042aa:	2500      	movs	r5, #0
 80042ac:	6033      	str	r3, [r6, #0]
 80042ae:	0028      	movs	r0, r5
 80042b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	1bd1      	subs	r1, r2, r7
 80042b6:	d420      	bmi.n	80042fa <_malloc_r+0xce>
 80042b8:	290b      	cmp	r1, #11
 80042ba:	d917      	bls.n	80042ec <_malloc_r+0xc0>
 80042bc:	19e2      	adds	r2, r4, r7
 80042be:	6027      	str	r7, [r4, #0]
 80042c0:	42a3      	cmp	r3, r4
 80042c2:	d111      	bne.n	80042e8 <_malloc_r+0xbc>
 80042c4:	602a      	str	r2, [r5, #0]
 80042c6:	6863      	ldr	r3, [r4, #4]
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	0030      	movs	r0, r6
 80042ce:	0025      	movs	r5, r4
 80042d0:	f000 f872 	bl	80043b8 <__malloc_unlock>
 80042d4:	2207      	movs	r2, #7
 80042d6:	350b      	adds	r5, #11
 80042d8:	1d23      	adds	r3, r4, #4
 80042da:	4395      	bics	r5, r2
 80042dc:	1aea      	subs	r2, r5, r3
 80042de:	429d      	cmp	r5, r3
 80042e0:	d0e5      	beq.n	80042ae <_malloc_r+0x82>
 80042e2:	1b5b      	subs	r3, r3, r5
 80042e4:	50a3      	str	r3, [r4, r2]
 80042e6:	e7e2      	b.n	80042ae <_malloc_r+0x82>
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	e7ec      	b.n	80042c6 <_malloc_r+0x9a>
 80042ec:	6862      	ldr	r2, [r4, #4]
 80042ee:	42a3      	cmp	r3, r4
 80042f0:	d101      	bne.n	80042f6 <_malloc_r+0xca>
 80042f2:	602a      	str	r2, [r5, #0]
 80042f4:	e7ea      	b.n	80042cc <_malloc_r+0xa0>
 80042f6:	605a      	str	r2, [r3, #4]
 80042f8:	e7e8      	b.n	80042cc <_malloc_r+0xa0>
 80042fa:	0023      	movs	r3, r4
 80042fc:	6864      	ldr	r4, [r4, #4]
 80042fe:	e7a7      	b.n	8004250 <_malloc_r+0x24>
 8004300:	002c      	movs	r4, r5
 8004302:	686d      	ldr	r5, [r5, #4]
 8004304:	e7af      	b.n	8004266 <_malloc_r+0x3a>
 8004306:	230c      	movs	r3, #12
 8004308:	0030      	movs	r0, r6
 800430a:	6033      	str	r3, [r6, #0]
 800430c:	f000 f854 	bl	80043b8 <__malloc_unlock>
 8004310:	e7cd      	b.n	80042ae <_malloc_r+0x82>
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	20001244 	.word	0x20001244

08004318 <_sbrk_r>:
 8004318:	2300      	movs	r3, #0
 800431a:	b570      	push	{r4, r5, r6, lr}
 800431c:	4d06      	ldr	r5, [pc, #24]	; (8004338 <_sbrk_r+0x20>)
 800431e:	0004      	movs	r4, r0
 8004320:	0008      	movs	r0, r1
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	f7fc fed0 	bl	80010c8 <_sbrk>
 8004328:	1c43      	adds	r3, r0, #1
 800432a:	d103      	bne.n	8004334 <_sbrk_r+0x1c>
 800432c:	682b      	ldr	r3, [r5, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d000      	beq.n	8004334 <_sbrk_r+0x1c>
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	bd70      	pop	{r4, r5, r6, pc}
 8004336:	46c0      	nop			; (mov r8, r8)
 8004338:	2000124c 	.word	0x2000124c

0800433c <siprintf>:
 800433c:	b40e      	push	{r1, r2, r3}
 800433e:	b500      	push	{lr}
 8004340:	490b      	ldr	r1, [pc, #44]	; (8004370 <siprintf+0x34>)
 8004342:	b09c      	sub	sp, #112	; 0x70
 8004344:	ab1d      	add	r3, sp, #116	; 0x74
 8004346:	9002      	str	r0, [sp, #8]
 8004348:	9006      	str	r0, [sp, #24]
 800434a:	9107      	str	r1, [sp, #28]
 800434c:	9104      	str	r1, [sp, #16]
 800434e:	4809      	ldr	r0, [pc, #36]	; (8004374 <siprintf+0x38>)
 8004350:	4909      	ldr	r1, [pc, #36]	; (8004378 <siprintf+0x3c>)
 8004352:	cb04      	ldmia	r3!, {r2}
 8004354:	9105      	str	r1, [sp, #20]
 8004356:	6800      	ldr	r0, [r0, #0]
 8004358:	a902      	add	r1, sp, #8
 800435a:	9301      	str	r3, [sp, #4]
 800435c:	f000 f896 	bl	800448c <_svfiprintf_r>
 8004360:	2300      	movs	r3, #0
 8004362:	9a02      	ldr	r2, [sp, #8]
 8004364:	7013      	strb	r3, [r2, #0]
 8004366:	b01c      	add	sp, #112	; 0x70
 8004368:	bc08      	pop	{r3}
 800436a:	b003      	add	sp, #12
 800436c:	4718      	bx	r3
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	7fffffff 	.word	0x7fffffff
 8004374:	20000010 	.word	0x20000010
 8004378:	ffff0208 	.word	0xffff0208

0800437c <strstr>:
 800437c:	780a      	ldrb	r2, [r1, #0]
 800437e:	b530      	push	{r4, r5, lr}
 8004380:	2a00      	cmp	r2, #0
 8004382:	d10c      	bne.n	800439e <strstr+0x22>
 8004384:	bd30      	pop	{r4, r5, pc}
 8004386:	429a      	cmp	r2, r3
 8004388:	d108      	bne.n	800439c <strstr+0x20>
 800438a:	2301      	movs	r3, #1
 800438c:	5ccc      	ldrb	r4, [r1, r3]
 800438e:	2c00      	cmp	r4, #0
 8004390:	d0f8      	beq.n	8004384 <strstr+0x8>
 8004392:	5cc5      	ldrb	r5, [r0, r3]
 8004394:	42a5      	cmp	r5, r4
 8004396:	d101      	bne.n	800439c <strstr+0x20>
 8004398:	3301      	adds	r3, #1
 800439a:	e7f7      	b.n	800438c <strstr+0x10>
 800439c:	3001      	adds	r0, #1
 800439e:	7803      	ldrb	r3, [r0, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1f0      	bne.n	8004386 <strstr+0xa>
 80043a4:	0018      	movs	r0, r3
 80043a6:	e7ed      	b.n	8004384 <strstr+0x8>

080043a8 <__malloc_lock>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	4802      	ldr	r0, [pc, #8]	; (80043b4 <__malloc_lock+0xc>)
 80043ac:	f000 faf0 	bl	8004990 <__retarget_lock_acquire_recursive>
 80043b0:	bd10      	pop	{r4, pc}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	20001250 	.word	0x20001250

080043b8 <__malloc_unlock>:
 80043b8:	b510      	push	{r4, lr}
 80043ba:	4802      	ldr	r0, [pc, #8]	; (80043c4 <__malloc_unlock+0xc>)
 80043bc:	f000 fae9 	bl	8004992 <__retarget_lock_release_recursive>
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	46c0      	nop			; (mov r8, r8)
 80043c4:	20001250 	.word	0x20001250

080043c8 <__ssputs_r>:
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	688e      	ldr	r6, [r1, #8]
 80043cc:	b085      	sub	sp, #20
 80043ce:	0007      	movs	r7, r0
 80043d0:	000c      	movs	r4, r1
 80043d2:	9203      	str	r2, [sp, #12]
 80043d4:	9301      	str	r3, [sp, #4]
 80043d6:	429e      	cmp	r6, r3
 80043d8:	d83c      	bhi.n	8004454 <__ssputs_r+0x8c>
 80043da:	2390      	movs	r3, #144	; 0x90
 80043dc:	898a      	ldrh	r2, [r1, #12]
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	421a      	tst	r2, r3
 80043e2:	d034      	beq.n	800444e <__ssputs_r+0x86>
 80043e4:	6909      	ldr	r1, [r1, #16]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	6960      	ldr	r0, [r4, #20]
 80043ea:	1a5b      	subs	r3, r3, r1
 80043ec:	9302      	str	r3, [sp, #8]
 80043ee:	2303      	movs	r3, #3
 80043f0:	4343      	muls	r3, r0
 80043f2:	0fdd      	lsrs	r5, r3, #31
 80043f4:	18ed      	adds	r5, r5, r3
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	9802      	ldr	r0, [sp, #8]
 80043fa:	3301      	adds	r3, #1
 80043fc:	181b      	adds	r3, r3, r0
 80043fe:	106d      	asrs	r5, r5, #1
 8004400:	42ab      	cmp	r3, r5
 8004402:	d900      	bls.n	8004406 <__ssputs_r+0x3e>
 8004404:	001d      	movs	r5, r3
 8004406:	0553      	lsls	r3, r2, #21
 8004408:	d532      	bpl.n	8004470 <__ssputs_r+0xa8>
 800440a:	0029      	movs	r1, r5
 800440c:	0038      	movs	r0, r7
 800440e:	f7ff ff0d 	bl	800422c <_malloc_r>
 8004412:	1e06      	subs	r6, r0, #0
 8004414:	d109      	bne.n	800442a <__ssputs_r+0x62>
 8004416:	230c      	movs	r3, #12
 8004418:	603b      	str	r3, [r7, #0]
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	2001      	movs	r0, #1
 800441e:	89a2      	ldrh	r2, [r4, #12]
 8004420:	4240      	negs	r0, r0
 8004422:	4313      	orrs	r3, r2
 8004424:	81a3      	strh	r3, [r4, #12]
 8004426:	b005      	add	sp, #20
 8004428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442a:	9a02      	ldr	r2, [sp, #8]
 800442c:	6921      	ldr	r1, [r4, #16]
 800442e:	f7ff fe7f 	bl	8004130 <memcpy>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	4a14      	ldr	r2, [pc, #80]	; (8004488 <__ssputs_r+0xc0>)
 8004436:	401a      	ands	r2, r3
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	4313      	orrs	r3, r2
 800443c:	81a3      	strh	r3, [r4, #12]
 800443e:	9b02      	ldr	r3, [sp, #8]
 8004440:	6126      	str	r6, [r4, #16]
 8004442:	18f6      	adds	r6, r6, r3
 8004444:	6026      	str	r6, [r4, #0]
 8004446:	6165      	str	r5, [r4, #20]
 8004448:	9e01      	ldr	r6, [sp, #4]
 800444a:	1aed      	subs	r5, r5, r3
 800444c:	60a5      	str	r5, [r4, #8]
 800444e:	9b01      	ldr	r3, [sp, #4]
 8004450:	429e      	cmp	r6, r3
 8004452:	d900      	bls.n	8004456 <__ssputs_r+0x8e>
 8004454:	9e01      	ldr	r6, [sp, #4]
 8004456:	0032      	movs	r2, r6
 8004458:	9903      	ldr	r1, [sp, #12]
 800445a:	6820      	ldr	r0, [r4, #0]
 800445c:	f000 faa5 	bl	80049aa <memmove>
 8004460:	68a3      	ldr	r3, [r4, #8]
 8004462:	2000      	movs	r0, #0
 8004464:	1b9b      	subs	r3, r3, r6
 8004466:	60a3      	str	r3, [r4, #8]
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	199e      	adds	r6, r3, r6
 800446c:	6026      	str	r6, [r4, #0]
 800446e:	e7da      	b.n	8004426 <__ssputs_r+0x5e>
 8004470:	002a      	movs	r2, r5
 8004472:	0038      	movs	r0, r7
 8004474:	f000 faac 	bl	80049d0 <_realloc_r>
 8004478:	1e06      	subs	r6, r0, #0
 800447a:	d1e0      	bne.n	800443e <__ssputs_r+0x76>
 800447c:	0038      	movs	r0, r7
 800447e:	6921      	ldr	r1, [r4, #16]
 8004480:	f7ff fe68 	bl	8004154 <_free_r>
 8004484:	e7c7      	b.n	8004416 <__ssputs_r+0x4e>
 8004486:	46c0      	nop			; (mov r8, r8)
 8004488:	fffffb7f 	.word	0xfffffb7f

0800448c <_svfiprintf_r>:
 800448c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800448e:	b0a1      	sub	sp, #132	; 0x84
 8004490:	9003      	str	r0, [sp, #12]
 8004492:	001d      	movs	r5, r3
 8004494:	898b      	ldrh	r3, [r1, #12]
 8004496:	000f      	movs	r7, r1
 8004498:	0016      	movs	r6, r2
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	d511      	bpl.n	80044c2 <_svfiprintf_r+0x36>
 800449e:	690b      	ldr	r3, [r1, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10e      	bne.n	80044c2 <_svfiprintf_r+0x36>
 80044a4:	2140      	movs	r1, #64	; 0x40
 80044a6:	f7ff fec1 	bl	800422c <_malloc_r>
 80044aa:	6038      	str	r0, [r7, #0]
 80044ac:	6138      	str	r0, [r7, #16]
 80044ae:	2800      	cmp	r0, #0
 80044b0:	d105      	bne.n	80044be <_svfiprintf_r+0x32>
 80044b2:	230c      	movs	r3, #12
 80044b4:	9a03      	ldr	r2, [sp, #12]
 80044b6:	3801      	subs	r0, #1
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	b021      	add	sp, #132	; 0x84
 80044bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044be:	2340      	movs	r3, #64	; 0x40
 80044c0:	617b      	str	r3, [r7, #20]
 80044c2:	2300      	movs	r3, #0
 80044c4:	ac08      	add	r4, sp, #32
 80044c6:	6163      	str	r3, [r4, #20]
 80044c8:	3320      	adds	r3, #32
 80044ca:	7663      	strb	r3, [r4, #25]
 80044cc:	3310      	adds	r3, #16
 80044ce:	76a3      	strb	r3, [r4, #26]
 80044d0:	9507      	str	r5, [sp, #28]
 80044d2:	0035      	movs	r5, r6
 80044d4:	782b      	ldrb	r3, [r5, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <_svfiprintf_r+0x52>
 80044da:	2b25      	cmp	r3, #37	; 0x25
 80044dc:	d147      	bne.n	800456e <_svfiprintf_r+0xe2>
 80044de:	1bab      	subs	r3, r5, r6
 80044e0:	9305      	str	r3, [sp, #20]
 80044e2:	42b5      	cmp	r5, r6
 80044e4:	d00c      	beq.n	8004500 <_svfiprintf_r+0x74>
 80044e6:	0032      	movs	r2, r6
 80044e8:	0039      	movs	r1, r7
 80044ea:	9803      	ldr	r0, [sp, #12]
 80044ec:	f7ff ff6c 	bl	80043c8 <__ssputs_r>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d100      	bne.n	80044f6 <_svfiprintf_r+0x6a>
 80044f4:	e0ae      	b.n	8004654 <_svfiprintf_r+0x1c8>
 80044f6:	6962      	ldr	r2, [r4, #20]
 80044f8:	9b05      	ldr	r3, [sp, #20]
 80044fa:	4694      	mov	ip, r2
 80044fc:	4463      	add	r3, ip
 80044fe:	6163      	str	r3, [r4, #20]
 8004500:	782b      	ldrb	r3, [r5, #0]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d100      	bne.n	8004508 <_svfiprintf_r+0x7c>
 8004506:	e0a5      	b.n	8004654 <_svfiprintf_r+0x1c8>
 8004508:	2201      	movs	r2, #1
 800450a:	2300      	movs	r3, #0
 800450c:	4252      	negs	r2, r2
 800450e:	6062      	str	r2, [r4, #4]
 8004510:	a904      	add	r1, sp, #16
 8004512:	3254      	adds	r2, #84	; 0x54
 8004514:	1852      	adds	r2, r2, r1
 8004516:	1c6e      	adds	r6, r5, #1
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	60e3      	str	r3, [r4, #12]
 800451c:	60a3      	str	r3, [r4, #8]
 800451e:	7013      	strb	r3, [r2, #0]
 8004520:	65a3      	str	r3, [r4, #88]	; 0x58
 8004522:	2205      	movs	r2, #5
 8004524:	7831      	ldrb	r1, [r6, #0]
 8004526:	4854      	ldr	r0, [pc, #336]	; (8004678 <_svfiprintf_r+0x1ec>)
 8004528:	f000 fa34 	bl	8004994 <memchr>
 800452c:	1c75      	adds	r5, r6, #1
 800452e:	2800      	cmp	r0, #0
 8004530:	d11f      	bne.n	8004572 <_svfiprintf_r+0xe6>
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	06d3      	lsls	r3, r2, #27
 8004536:	d504      	bpl.n	8004542 <_svfiprintf_r+0xb6>
 8004538:	2353      	movs	r3, #83	; 0x53
 800453a:	a904      	add	r1, sp, #16
 800453c:	185b      	adds	r3, r3, r1
 800453e:	2120      	movs	r1, #32
 8004540:	7019      	strb	r1, [r3, #0]
 8004542:	0713      	lsls	r3, r2, #28
 8004544:	d504      	bpl.n	8004550 <_svfiprintf_r+0xc4>
 8004546:	2353      	movs	r3, #83	; 0x53
 8004548:	a904      	add	r1, sp, #16
 800454a:	185b      	adds	r3, r3, r1
 800454c:	212b      	movs	r1, #43	; 0x2b
 800454e:	7019      	strb	r1, [r3, #0]
 8004550:	7833      	ldrb	r3, [r6, #0]
 8004552:	2b2a      	cmp	r3, #42	; 0x2a
 8004554:	d016      	beq.n	8004584 <_svfiprintf_r+0xf8>
 8004556:	0035      	movs	r5, r6
 8004558:	2100      	movs	r1, #0
 800455a:	200a      	movs	r0, #10
 800455c:	68e3      	ldr	r3, [r4, #12]
 800455e:	782a      	ldrb	r2, [r5, #0]
 8004560:	1c6e      	adds	r6, r5, #1
 8004562:	3a30      	subs	r2, #48	; 0x30
 8004564:	2a09      	cmp	r2, #9
 8004566:	d94e      	bls.n	8004606 <_svfiprintf_r+0x17a>
 8004568:	2900      	cmp	r1, #0
 800456a:	d111      	bne.n	8004590 <_svfiprintf_r+0x104>
 800456c:	e017      	b.n	800459e <_svfiprintf_r+0x112>
 800456e:	3501      	adds	r5, #1
 8004570:	e7b0      	b.n	80044d4 <_svfiprintf_r+0x48>
 8004572:	4b41      	ldr	r3, [pc, #260]	; (8004678 <_svfiprintf_r+0x1ec>)
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	1ac0      	subs	r0, r0, r3
 8004578:	2301      	movs	r3, #1
 800457a:	4083      	lsls	r3, r0
 800457c:	4313      	orrs	r3, r2
 800457e:	002e      	movs	r6, r5
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	e7ce      	b.n	8004522 <_svfiprintf_r+0x96>
 8004584:	9b07      	ldr	r3, [sp, #28]
 8004586:	1d19      	adds	r1, r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	9107      	str	r1, [sp, #28]
 800458c:	2b00      	cmp	r3, #0
 800458e:	db01      	blt.n	8004594 <_svfiprintf_r+0x108>
 8004590:	930b      	str	r3, [sp, #44]	; 0x2c
 8004592:	e004      	b.n	800459e <_svfiprintf_r+0x112>
 8004594:	425b      	negs	r3, r3
 8004596:	60e3      	str	r3, [r4, #12]
 8004598:	2302      	movs	r3, #2
 800459a:	4313      	orrs	r3, r2
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	782b      	ldrb	r3, [r5, #0]
 80045a0:	2b2e      	cmp	r3, #46	; 0x2e
 80045a2:	d10a      	bne.n	80045ba <_svfiprintf_r+0x12e>
 80045a4:	786b      	ldrb	r3, [r5, #1]
 80045a6:	2b2a      	cmp	r3, #42	; 0x2a
 80045a8:	d135      	bne.n	8004616 <_svfiprintf_r+0x18a>
 80045aa:	9b07      	ldr	r3, [sp, #28]
 80045ac:	3502      	adds	r5, #2
 80045ae:	1d1a      	adds	r2, r3, #4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	9207      	str	r2, [sp, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db2b      	blt.n	8004610 <_svfiprintf_r+0x184>
 80045b8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ba:	4e30      	ldr	r6, [pc, #192]	; (800467c <_svfiprintf_r+0x1f0>)
 80045bc:	2203      	movs	r2, #3
 80045be:	0030      	movs	r0, r6
 80045c0:	7829      	ldrb	r1, [r5, #0]
 80045c2:	f000 f9e7 	bl	8004994 <memchr>
 80045c6:	2800      	cmp	r0, #0
 80045c8:	d006      	beq.n	80045d8 <_svfiprintf_r+0x14c>
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	1b80      	subs	r0, r0, r6
 80045ce:	4083      	lsls	r3, r0
 80045d0:	6822      	ldr	r2, [r4, #0]
 80045d2:	3501      	adds	r5, #1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	6023      	str	r3, [r4, #0]
 80045d8:	7829      	ldrb	r1, [r5, #0]
 80045da:	2206      	movs	r2, #6
 80045dc:	4828      	ldr	r0, [pc, #160]	; (8004680 <_svfiprintf_r+0x1f4>)
 80045de:	1c6e      	adds	r6, r5, #1
 80045e0:	7621      	strb	r1, [r4, #24]
 80045e2:	f000 f9d7 	bl	8004994 <memchr>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d03c      	beq.n	8004664 <_svfiprintf_r+0x1d8>
 80045ea:	4b26      	ldr	r3, [pc, #152]	; (8004684 <_svfiprintf_r+0x1f8>)
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d125      	bne.n	800463c <_svfiprintf_r+0x1b0>
 80045f0:	2207      	movs	r2, #7
 80045f2:	9b07      	ldr	r3, [sp, #28]
 80045f4:	3307      	adds	r3, #7
 80045f6:	4393      	bics	r3, r2
 80045f8:	3308      	adds	r3, #8
 80045fa:	9307      	str	r3, [sp, #28]
 80045fc:	6963      	ldr	r3, [r4, #20]
 80045fe:	9a04      	ldr	r2, [sp, #16]
 8004600:	189b      	adds	r3, r3, r2
 8004602:	6163      	str	r3, [r4, #20]
 8004604:	e765      	b.n	80044d2 <_svfiprintf_r+0x46>
 8004606:	4343      	muls	r3, r0
 8004608:	0035      	movs	r5, r6
 800460a:	2101      	movs	r1, #1
 800460c:	189b      	adds	r3, r3, r2
 800460e:	e7a6      	b.n	800455e <_svfiprintf_r+0xd2>
 8004610:	2301      	movs	r3, #1
 8004612:	425b      	negs	r3, r3
 8004614:	e7d0      	b.n	80045b8 <_svfiprintf_r+0x12c>
 8004616:	2300      	movs	r3, #0
 8004618:	200a      	movs	r0, #10
 800461a:	001a      	movs	r2, r3
 800461c:	3501      	adds	r5, #1
 800461e:	6063      	str	r3, [r4, #4]
 8004620:	7829      	ldrb	r1, [r5, #0]
 8004622:	1c6e      	adds	r6, r5, #1
 8004624:	3930      	subs	r1, #48	; 0x30
 8004626:	2909      	cmp	r1, #9
 8004628:	d903      	bls.n	8004632 <_svfiprintf_r+0x1a6>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0c5      	beq.n	80045ba <_svfiprintf_r+0x12e>
 800462e:	9209      	str	r2, [sp, #36]	; 0x24
 8004630:	e7c3      	b.n	80045ba <_svfiprintf_r+0x12e>
 8004632:	4342      	muls	r2, r0
 8004634:	0035      	movs	r5, r6
 8004636:	2301      	movs	r3, #1
 8004638:	1852      	adds	r2, r2, r1
 800463a:	e7f1      	b.n	8004620 <_svfiprintf_r+0x194>
 800463c:	ab07      	add	r3, sp, #28
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	003a      	movs	r2, r7
 8004642:	0021      	movs	r1, r4
 8004644:	4b10      	ldr	r3, [pc, #64]	; (8004688 <_svfiprintf_r+0x1fc>)
 8004646:	9803      	ldr	r0, [sp, #12]
 8004648:	e000      	b.n	800464c <_svfiprintf_r+0x1c0>
 800464a:	bf00      	nop
 800464c:	9004      	str	r0, [sp, #16]
 800464e:	9b04      	ldr	r3, [sp, #16]
 8004650:	3301      	adds	r3, #1
 8004652:	d1d3      	bne.n	80045fc <_svfiprintf_r+0x170>
 8004654:	89bb      	ldrh	r3, [r7, #12]
 8004656:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004658:	065b      	lsls	r3, r3, #25
 800465a:	d400      	bmi.n	800465e <_svfiprintf_r+0x1d2>
 800465c:	e72d      	b.n	80044ba <_svfiprintf_r+0x2e>
 800465e:	2001      	movs	r0, #1
 8004660:	4240      	negs	r0, r0
 8004662:	e72a      	b.n	80044ba <_svfiprintf_r+0x2e>
 8004664:	ab07      	add	r3, sp, #28
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	003a      	movs	r2, r7
 800466a:	0021      	movs	r1, r4
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <_svfiprintf_r+0x1fc>)
 800466e:	9803      	ldr	r0, [sp, #12]
 8004670:	f000 f87c 	bl	800476c <_printf_i>
 8004674:	e7ea      	b.n	800464c <_svfiprintf_r+0x1c0>
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	08004bf8 	.word	0x08004bf8
 800467c:	08004bfe 	.word	0x08004bfe
 8004680:	08004c02 	.word	0x08004c02
 8004684:	00000000 	.word	0x00000000
 8004688:	080043c9 	.word	0x080043c9

0800468c <_printf_common>:
 800468c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800468e:	0015      	movs	r5, r2
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	688a      	ldr	r2, [r1, #8]
 8004694:	690b      	ldr	r3, [r1, #16]
 8004696:	000c      	movs	r4, r1
 8004698:	9000      	str	r0, [sp, #0]
 800469a:	4293      	cmp	r3, r2
 800469c:	da00      	bge.n	80046a0 <_printf_common+0x14>
 800469e:	0013      	movs	r3, r2
 80046a0:	0022      	movs	r2, r4
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	3243      	adds	r2, #67	; 0x43
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	d001      	beq.n	80046b0 <_printf_common+0x24>
 80046ac:	3301      	adds	r3, #1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	069b      	lsls	r3, r3, #26
 80046b4:	d502      	bpl.n	80046bc <_printf_common+0x30>
 80046b6:	682b      	ldr	r3, [r5, #0]
 80046b8:	3302      	adds	r3, #2
 80046ba:	602b      	str	r3, [r5, #0]
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	2306      	movs	r3, #6
 80046c0:	0017      	movs	r7, r2
 80046c2:	401f      	ands	r7, r3
 80046c4:	421a      	tst	r2, r3
 80046c6:	d027      	beq.n	8004718 <_printf_common+0x8c>
 80046c8:	0023      	movs	r3, r4
 80046ca:	3343      	adds	r3, #67	; 0x43
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	4193      	sbcs	r3, r2
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	0692      	lsls	r2, r2, #26
 80046d6:	d430      	bmi.n	800473a <_printf_common+0xae>
 80046d8:	0022      	movs	r2, r4
 80046da:	9901      	ldr	r1, [sp, #4]
 80046dc:	9800      	ldr	r0, [sp, #0]
 80046de:	9e08      	ldr	r6, [sp, #32]
 80046e0:	3243      	adds	r2, #67	; 0x43
 80046e2:	47b0      	blx	r6
 80046e4:	1c43      	adds	r3, r0, #1
 80046e6:	d025      	beq.n	8004734 <_printf_common+0xa8>
 80046e8:	2306      	movs	r3, #6
 80046ea:	6820      	ldr	r0, [r4, #0]
 80046ec:	682a      	ldr	r2, [r5, #0]
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	2500      	movs	r5, #0
 80046f2:	4003      	ands	r3, r0
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d103      	bne.n	8004700 <_printf_common+0x74>
 80046f8:	1a8d      	subs	r5, r1, r2
 80046fa:	43eb      	mvns	r3, r5
 80046fc:	17db      	asrs	r3, r3, #31
 80046fe:	401d      	ands	r5, r3
 8004700:	68a3      	ldr	r3, [r4, #8]
 8004702:	6922      	ldr	r2, [r4, #16]
 8004704:	4293      	cmp	r3, r2
 8004706:	dd01      	ble.n	800470c <_printf_common+0x80>
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	18ed      	adds	r5, r5, r3
 800470c:	2700      	movs	r7, #0
 800470e:	42bd      	cmp	r5, r7
 8004710:	d120      	bne.n	8004754 <_printf_common+0xc8>
 8004712:	2000      	movs	r0, #0
 8004714:	e010      	b.n	8004738 <_printf_common+0xac>
 8004716:	3701      	adds	r7, #1
 8004718:	68e3      	ldr	r3, [r4, #12]
 800471a:	682a      	ldr	r2, [r5, #0]
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	42bb      	cmp	r3, r7
 8004720:	ddd2      	ble.n	80046c8 <_printf_common+0x3c>
 8004722:	0022      	movs	r2, r4
 8004724:	2301      	movs	r3, #1
 8004726:	9901      	ldr	r1, [sp, #4]
 8004728:	9800      	ldr	r0, [sp, #0]
 800472a:	9e08      	ldr	r6, [sp, #32]
 800472c:	3219      	adds	r2, #25
 800472e:	47b0      	blx	r6
 8004730:	1c43      	adds	r3, r0, #1
 8004732:	d1f0      	bne.n	8004716 <_printf_common+0x8a>
 8004734:	2001      	movs	r0, #1
 8004736:	4240      	negs	r0, r0
 8004738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800473a:	2030      	movs	r0, #48	; 0x30
 800473c:	18e1      	adds	r1, r4, r3
 800473e:	3143      	adds	r1, #67	; 0x43
 8004740:	7008      	strb	r0, [r1, #0]
 8004742:	0021      	movs	r1, r4
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	3145      	adds	r1, #69	; 0x45
 8004748:	7809      	ldrb	r1, [r1, #0]
 800474a:	18a2      	adds	r2, r4, r2
 800474c:	3243      	adds	r2, #67	; 0x43
 800474e:	3302      	adds	r3, #2
 8004750:	7011      	strb	r1, [r2, #0]
 8004752:	e7c1      	b.n	80046d8 <_printf_common+0x4c>
 8004754:	0022      	movs	r2, r4
 8004756:	2301      	movs	r3, #1
 8004758:	9901      	ldr	r1, [sp, #4]
 800475a:	9800      	ldr	r0, [sp, #0]
 800475c:	9e08      	ldr	r6, [sp, #32]
 800475e:	321a      	adds	r2, #26
 8004760:	47b0      	blx	r6
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	d0e6      	beq.n	8004734 <_printf_common+0xa8>
 8004766:	3701      	adds	r7, #1
 8004768:	e7d1      	b.n	800470e <_printf_common+0x82>
	...

0800476c <_printf_i>:
 800476c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800476e:	b08b      	sub	sp, #44	; 0x2c
 8004770:	9206      	str	r2, [sp, #24]
 8004772:	000a      	movs	r2, r1
 8004774:	3243      	adds	r2, #67	; 0x43
 8004776:	9307      	str	r3, [sp, #28]
 8004778:	9005      	str	r0, [sp, #20]
 800477a:	9204      	str	r2, [sp, #16]
 800477c:	7e0a      	ldrb	r2, [r1, #24]
 800477e:	000c      	movs	r4, r1
 8004780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004782:	2a78      	cmp	r2, #120	; 0x78
 8004784:	d807      	bhi.n	8004796 <_printf_i+0x2a>
 8004786:	2a62      	cmp	r2, #98	; 0x62
 8004788:	d809      	bhi.n	800479e <_printf_i+0x32>
 800478a:	2a00      	cmp	r2, #0
 800478c:	d100      	bne.n	8004790 <_printf_i+0x24>
 800478e:	e0c1      	b.n	8004914 <_printf_i+0x1a8>
 8004790:	2a58      	cmp	r2, #88	; 0x58
 8004792:	d100      	bne.n	8004796 <_printf_i+0x2a>
 8004794:	e08c      	b.n	80048b0 <_printf_i+0x144>
 8004796:	0026      	movs	r6, r4
 8004798:	3642      	adds	r6, #66	; 0x42
 800479a:	7032      	strb	r2, [r6, #0]
 800479c:	e022      	b.n	80047e4 <_printf_i+0x78>
 800479e:	0010      	movs	r0, r2
 80047a0:	3863      	subs	r0, #99	; 0x63
 80047a2:	2815      	cmp	r0, #21
 80047a4:	d8f7      	bhi.n	8004796 <_printf_i+0x2a>
 80047a6:	f7fb fcb7 	bl	8000118 <__gnu_thumb1_case_shi>
 80047aa:	0016      	.short	0x0016
 80047ac:	fff6001f 	.word	0xfff6001f
 80047b0:	fff6fff6 	.word	0xfff6fff6
 80047b4:	001ffff6 	.word	0x001ffff6
 80047b8:	fff6fff6 	.word	0xfff6fff6
 80047bc:	fff6fff6 	.word	0xfff6fff6
 80047c0:	003600a8 	.word	0x003600a8
 80047c4:	fff6009a 	.word	0xfff6009a
 80047c8:	00b9fff6 	.word	0x00b9fff6
 80047cc:	0036fff6 	.word	0x0036fff6
 80047d0:	fff6fff6 	.word	0xfff6fff6
 80047d4:	009e      	.short	0x009e
 80047d6:	0026      	movs	r6, r4
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	3642      	adds	r6, #66	; 0x42
 80047dc:	1d11      	adds	r1, r2, #4
 80047de:	6019      	str	r1, [r3, #0]
 80047e0:	6813      	ldr	r3, [r2, #0]
 80047e2:	7033      	strb	r3, [r6, #0]
 80047e4:	2301      	movs	r3, #1
 80047e6:	e0a7      	b.n	8004938 <_printf_i+0x1cc>
 80047e8:	6808      	ldr	r0, [r1, #0]
 80047ea:	6819      	ldr	r1, [r3, #0]
 80047ec:	1d0a      	adds	r2, r1, #4
 80047ee:	0605      	lsls	r5, r0, #24
 80047f0:	d50b      	bpl.n	800480a <_printf_i+0x9e>
 80047f2:	680d      	ldr	r5, [r1, #0]
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	2d00      	cmp	r5, #0
 80047f8:	da03      	bge.n	8004802 <_printf_i+0x96>
 80047fa:	232d      	movs	r3, #45	; 0x2d
 80047fc:	9a04      	ldr	r2, [sp, #16]
 80047fe:	426d      	negs	r5, r5
 8004800:	7013      	strb	r3, [r2, #0]
 8004802:	4b61      	ldr	r3, [pc, #388]	; (8004988 <_printf_i+0x21c>)
 8004804:	270a      	movs	r7, #10
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	e01b      	b.n	8004842 <_printf_i+0xd6>
 800480a:	680d      	ldr	r5, [r1, #0]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	0641      	lsls	r1, r0, #25
 8004810:	d5f1      	bpl.n	80047f6 <_printf_i+0x8a>
 8004812:	b22d      	sxth	r5, r5
 8004814:	e7ef      	b.n	80047f6 <_printf_i+0x8a>
 8004816:	680d      	ldr	r5, [r1, #0]
 8004818:	6819      	ldr	r1, [r3, #0]
 800481a:	1d08      	adds	r0, r1, #4
 800481c:	6018      	str	r0, [r3, #0]
 800481e:	062e      	lsls	r6, r5, #24
 8004820:	d501      	bpl.n	8004826 <_printf_i+0xba>
 8004822:	680d      	ldr	r5, [r1, #0]
 8004824:	e003      	b.n	800482e <_printf_i+0xc2>
 8004826:	066d      	lsls	r5, r5, #25
 8004828:	d5fb      	bpl.n	8004822 <_printf_i+0xb6>
 800482a:	680d      	ldr	r5, [r1, #0]
 800482c:	b2ad      	uxth	r5, r5
 800482e:	4b56      	ldr	r3, [pc, #344]	; (8004988 <_printf_i+0x21c>)
 8004830:	2708      	movs	r7, #8
 8004832:	9303      	str	r3, [sp, #12]
 8004834:	2a6f      	cmp	r2, #111	; 0x6f
 8004836:	d000      	beq.n	800483a <_printf_i+0xce>
 8004838:	3702      	adds	r7, #2
 800483a:	0023      	movs	r3, r4
 800483c:	2200      	movs	r2, #0
 800483e:	3343      	adds	r3, #67	; 0x43
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	6863      	ldr	r3, [r4, #4]
 8004844:	60a3      	str	r3, [r4, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	db03      	blt.n	8004852 <_printf_i+0xe6>
 800484a:	2204      	movs	r2, #4
 800484c:	6821      	ldr	r1, [r4, #0]
 800484e:	4391      	bics	r1, r2
 8004850:	6021      	str	r1, [r4, #0]
 8004852:	2d00      	cmp	r5, #0
 8004854:	d102      	bne.n	800485c <_printf_i+0xf0>
 8004856:	9e04      	ldr	r6, [sp, #16]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00c      	beq.n	8004876 <_printf_i+0x10a>
 800485c:	9e04      	ldr	r6, [sp, #16]
 800485e:	0028      	movs	r0, r5
 8004860:	0039      	movs	r1, r7
 8004862:	f7fb fce9 	bl	8000238 <__aeabi_uidivmod>
 8004866:	9b03      	ldr	r3, [sp, #12]
 8004868:	3e01      	subs	r6, #1
 800486a:	5c5b      	ldrb	r3, [r3, r1]
 800486c:	7033      	strb	r3, [r6, #0]
 800486e:	002b      	movs	r3, r5
 8004870:	0005      	movs	r5, r0
 8004872:	429f      	cmp	r7, r3
 8004874:	d9f3      	bls.n	800485e <_printf_i+0xf2>
 8004876:	2f08      	cmp	r7, #8
 8004878:	d109      	bne.n	800488e <_printf_i+0x122>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	07db      	lsls	r3, r3, #31
 800487e:	d506      	bpl.n	800488e <_printf_i+0x122>
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	6922      	ldr	r2, [r4, #16]
 8004884:	4293      	cmp	r3, r2
 8004886:	dc02      	bgt.n	800488e <_printf_i+0x122>
 8004888:	2330      	movs	r3, #48	; 0x30
 800488a:	3e01      	subs	r6, #1
 800488c:	7033      	strb	r3, [r6, #0]
 800488e:	9b04      	ldr	r3, [sp, #16]
 8004890:	1b9b      	subs	r3, r3, r6
 8004892:	6123      	str	r3, [r4, #16]
 8004894:	9b07      	ldr	r3, [sp, #28]
 8004896:	0021      	movs	r1, r4
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	9805      	ldr	r0, [sp, #20]
 800489c:	9b06      	ldr	r3, [sp, #24]
 800489e:	aa09      	add	r2, sp, #36	; 0x24
 80048a0:	f7ff fef4 	bl	800468c <_printf_common>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d14c      	bne.n	8004942 <_printf_i+0x1d6>
 80048a8:	2001      	movs	r0, #1
 80048aa:	4240      	negs	r0, r0
 80048ac:	b00b      	add	sp, #44	; 0x2c
 80048ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048b0:	3145      	adds	r1, #69	; 0x45
 80048b2:	700a      	strb	r2, [r1, #0]
 80048b4:	4a34      	ldr	r2, [pc, #208]	; (8004988 <_printf_i+0x21c>)
 80048b6:	9203      	str	r2, [sp, #12]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	6821      	ldr	r1, [r4, #0]
 80048bc:	ca20      	ldmia	r2!, {r5}
 80048be:	601a      	str	r2, [r3, #0]
 80048c0:	0608      	lsls	r0, r1, #24
 80048c2:	d516      	bpl.n	80048f2 <_printf_i+0x186>
 80048c4:	07cb      	lsls	r3, r1, #31
 80048c6:	d502      	bpl.n	80048ce <_printf_i+0x162>
 80048c8:	2320      	movs	r3, #32
 80048ca:	4319      	orrs	r1, r3
 80048cc:	6021      	str	r1, [r4, #0]
 80048ce:	2710      	movs	r7, #16
 80048d0:	2d00      	cmp	r5, #0
 80048d2:	d1b2      	bne.n	800483a <_printf_i+0xce>
 80048d4:	2320      	movs	r3, #32
 80048d6:	6822      	ldr	r2, [r4, #0]
 80048d8:	439a      	bics	r2, r3
 80048da:	6022      	str	r2, [r4, #0]
 80048dc:	e7ad      	b.n	800483a <_printf_i+0xce>
 80048de:	2220      	movs	r2, #32
 80048e0:	6809      	ldr	r1, [r1, #0]
 80048e2:	430a      	orrs	r2, r1
 80048e4:	6022      	str	r2, [r4, #0]
 80048e6:	0022      	movs	r2, r4
 80048e8:	2178      	movs	r1, #120	; 0x78
 80048ea:	3245      	adds	r2, #69	; 0x45
 80048ec:	7011      	strb	r1, [r2, #0]
 80048ee:	4a27      	ldr	r2, [pc, #156]	; (800498c <_printf_i+0x220>)
 80048f0:	e7e1      	b.n	80048b6 <_printf_i+0x14a>
 80048f2:	0648      	lsls	r0, r1, #25
 80048f4:	d5e6      	bpl.n	80048c4 <_printf_i+0x158>
 80048f6:	b2ad      	uxth	r5, r5
 80048f8:	e7e4      	b.n	80048c4 <_printf_i+0x158>
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	680d      	ldr	r5, [r1, #0]
 80048fe:	1d10      	adds	r0, r2, #4
 8004900:	6949      	ldr	r1, [r1, #20]
 8004902:	6018      	str	r0, [r3, #0]
 8004904:	6813      	ldr	r3, [r2, #0]
 8004906:	062e      	lsls	r6, r5, #24
 8004908:	d501      	bpl.n	800490e <_printf_i+0x1a2>
 800490a:	6019      	str	r1, [r3, #0]
 800490c:	e002      	b.n	8004914 <_printf_i+0x1a8>
 800490e:	066d      	lsls	r5, r5, #25
 8004910:	d5fb      	bpl.n	800490a <_printf_i+0x19e>
 8004912:	8019      	strh	r1, [r3, #0]
 8004914:	2300      	movs	r3, #0
 8004916:	9e04      	ldr	r6, [sp, #16]
 8004918:	6123      	str	r3, [r4, #16]
 800491a:	e7bb      	b.n	8004894 <_printf_i+0x128>
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	1d11      	adds	r1, r2, #4
 8004920:	6019      	str	r1, [r3, #0]
 8004922:	6816      	ldr	r6, [r2, #0]
 8004924:	2100      	movs	r1, #0
 8004926:	0030      	movs	r0, r6
 8004928:	6862      	ldr	r2, [r4, #4]
 800492a:	f000 f833 	bl	8004994 <memchr>
 800492e:	2800      	cmp	r0, #0
 8004930:	d001      	beq.n	8004936 <_printf_i+0x1ca>
 8004932:	1b80      	subs	r0, r0, r6
 8004934:	6060      	str	r0, [r4, #4]
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	6123      	str	r3, [r4, #16]
 800493a:	2300      	movs	r3, #0
 800493c:	9a04      	ldr	r2, [sp, #16]
 800493e:	7013      	strb	r3, [r2, #0]
 8004940:	e7a8      	b.n	8004894 <_printf_i+0x128>
 8004942:	6923      	ldr	r3, [r4, #16]
 8004944:	0032      	movs	r2, r6
 8004946:	9906      	ldr	r1, [sp, #24]
 8004948:	9805      	ldr	r0, [sp, #20]
 800494a:	9d07      	ldr	r5, [sp, #28]
 800494c:	47a8      	blx	r5
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	d0aa      	beq.n	80048a8 <_printf_i+0x13c>
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	079b      	lsls	r3, r3, #30
 8004956:	d415      	bmi.n	8004984 <_printf_i+0x218>
 8004958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	4298      	cmp	r0, r3
 800495e:	daa5      	bge.n	80048ac <_printf_i+0x140>
 8004960:	0018      	movs	r0, r3
 8004962:	e7a3      	b.n	80048ac <_printf_i+0x140>
 8004964:	0022      	movs	r2, r4
 8004966:	2301      	movs	r3, #1
 8004968:	9906      	ldr	r1, [sp, #24]
 800496a:	9805      	ldr	r0, [sp, #20]
 800496c:	9e07      	ldr	r6, [sp, #28]
 800496e:	3219      	adds	r2, #25
 8004970:	47b0      	blx	r6
 8004972:	1c43      	adds	r3, r0, #1
 8004974:	d098      	beq.n	80048a8 <_printf_i+0x13c>
 8004976:	3501      	adds	r5, #1
 8004978:	68e3      	ldr	r3, [r4, #12]
 800497a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800497c:	1a9b      	subs	r3, r3, r2
 800497e:	42ab      	cmp	r3, r5
 8004980:	dcf0      	bgt.n	8004964 <_printf_i+0x1f8>
 8004982:	e7e9      	b.n	8004958 <_printf_i+0x1ec>
 8004984:	2500      	movs	r5, #0
 8004986:	e7f7      	b.n	8004978 <_printf_i+0x20c>
 8004988:	08004c09 	.word	0x08004c09
 800498c:	08004c1a 	.word	0x08004c1a

08004990 <__retarget_lock_acquire_recursive>:
 8004990:	4770      	bx	lr

08004992 <__retarget_lock_release_recursive>:
 8004992:	4770      	bx	lr

08004994 <memchr>:
 8004994:	b2c9      	uxtb	r1, r1
 8004996:	1882      	adds	r2, r0, r2
 8004998:	4290      	cmp	r0, r2
 800499a:	d101      	bne.n	80049a0 <memchr+0xc>
 800499c:	2000      	movs	r0, #0
 800499e:	4770      	bx	lr
 80049a0:	7803      	ldrb	r3, [r0, #0]
 80049a2:	428b      	cmp	r3, r1
 80049a4:	d0fb      	beq.n	800499e <memchr+0xa>
 80049a6:	3001      	adds	r0, #1
 80049a8:	e7f6      	b.n	8004998 <memchr+0x4>

080049aa <memmove>:
 80049aa:	b510      	push	{r4, lr}
 80049ac:	4288      	cmp	r0, r1
 80049ae:	d902      	bls.n	80049b6 <memmove+0xc>
 80049b0:	188b      	adds	r3, r1, r2
 80049b2:	4298      	cmp	r0, r3
 80049b4:	d303      	bcc.n	80049be <memmove+0x14>
 80049b6:	2300      	movs	r3, #0
 80049b8:	e007      	b.n	80049ca <memmove+0x20>
 80049ba:	5c8b      	ldrb	r3, [r1, r2]
 80049bc:	5483      	strb	r3, [r0, r2]
 80049be:	3a01      	subs	r2, #1
 80049c0:	d2fb      	bcs.n	80049ba <memmove+0x10>
 80049c2:	bd10      	pop	{r4, pc}
 80049c4:	5ccc      	ldrb	r4, [r1, r3]
 80049c6:	54c4      	strb	r4, [r0, r3]
 80049c8:	3301      	adds	r3, #1
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d1fa      	bne.n	80049c4 <memmove+0x1a>
 80049ce:	e7f8      	b.n	80049c2 <memmove+0x18>

080049d0 <_realloc_r>:
 80049d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049d2:	0007      	movs	r7, r0
 80049d4:	000e      	movs	r6, r1
 80049d6:	0014      	movs	r4, r2
 80049d8:	2900      	cmp	r1, #0
 80049da:	d105      	bne.n	80049e8 <_realloc_r+0x18>
 80049dc:	0011      	movs	r1, r2
 80049de:	f7ff fc25 	bl	800422c <_malloc_r>
 80049e2:	0005      	movs	r5, r0
 80049e4:	0028      	movs	r0, r5
 80049e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	d103      	bne.n	80049f4 <_realloc_r+0x24>
 80049ec:	f7ff fbb2 	bl	8004154 <_free_r>
 80049f0:	0025      	movs	r5, r4
 80049f2:	e7f7      	b.n	80049e4 <_realloc_r+0x14>
 80049f4:	f000 f81b 	bl	8004a2e <_malloc_usable_size_r>
 80049f8:	9001      	str	r0, [sp, #4]
 80049fa:	4284      	cmp	r4, r0
 80049fc:	d803      	bhi.n	8004a06 <_realloc_r+0x36>
 80049fe:	0035      	movs	r5, r6
 8004a00:	0843      	lsrs	r3, r0, #1
 8004a02:	42a3      	cmp	r3, r4
 8004a04:	d3ee      	bcc.n	80049e4 <_realloc_r+0x14>
 8004a06:	0021      	movs	r1, r4
 8004a08:	0038      	movs	r0, r7
 8004a0a:	f7ff fc0f 	bl	800422c <_malloc_r>
 8004a0e:	1e05      	subs	r5, r0, #0
 8004a10:	d0e8      	beq.n	80049e4 <_realloc_r+0x14>
 8004a12:	9b01      	ldr	r3, [sp, #4]
 8004a14:	0022      	movs	r2, r4
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d900      	bls.n	8004a1c <_realloc_r+0x4c>
 8004a1a:	001a      	movs	r2, r3
 8004a1c:	0031      	movs	r1, r6
 8004a1e:	0028      	movs	r0, r5
 8004a20:	f7ff fb86 	bl	8004130 <memcpy>
 8004a24:	0031      	movs	r1, r6
 8004a26:	0038      	movs	r0, r7
 8004a28:	f7ff fb94 	bl	8004154 <_free_r>
 8004a2c:	e7da      	b.n	80049e4 <_realloc_r+0x14>

08004a2e <_malloc_usable_size_r>:
 8004a2e:	1f0b      	subs	r3, r1, #4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	1f18      	subs	r0, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	da01      	bge.n	8004a3c <_malloc_usable_size_r+0xe>
 8004a38:	580b      	ldr	r3, [r1, r0]
 8004a3a:	18c0      	adds	r0, r0, r3
 8004a3c:	4770      	bx	lr
	...

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	46c0      	nop			; (mov r8, r8)
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
